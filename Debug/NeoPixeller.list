
NeoPixeller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009870  08009870  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009870  08009870  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009870  08009870  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  2000017c  080099f4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015f4  080099f4  000215f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136fa  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003588  00000000  00000000  0003389f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00036e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c849  00000000  00000000  00038e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148f4  00000000  00000000  00055659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2e7  00000000  00000000  00069f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  000f9284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080097e8 	.word	0x080097e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080097e8 	.word	0x080097e8

0800014c <_ZN6ws28128NeoPixel19update_write_bufferEv>:

#include "NeoPixel.h"

namespace ws2812 {

void NeoPixel::update_write_buffer(){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]
 8000158:	7bfb      	ldrb	r3, [r7, #15]
 800015a:	2b33      	cmp	r3, #51	; 0x33
 800015c:	d857      	bhi.n	800020e <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc2>
		for(uint8_t j = 0; j < color_num; j++){
 800015e:	2300      	movs	r3, #0
 8000160:	73bb      	strb	r3, [r7, #14]
 8000162:	7bbb      	ldrb	r3, [r7, #14]
 8000164:	2b02      	cmp	r3, #2
 8000166:	d84e      	bhi.n	8000206 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xba>
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000168:	7bbb      	ldrb	r3, [r7, #14]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d109      	bne.n	8000182 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x36>
 800016e:	7bfa      	ldrb	r2, [r7, #15]
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4613      	mov	r3, r2
 8000174:	005b      	lsls	r3, r3, #1
 8000176:	4413      	add	r3, r2
 8000178:	440b      	add	r3, r1
 800017a:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	e01a      	b.n	80001b8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d109      	bne.n	800019c <_ZN6ws28128NeoPixel19update_write_bufferEv+0x50>
							: 	(j == 1) ? NeoPixel::colors[i].red
 8000188:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800018a:	6879      	ldr	r1, [r7, #4]
 800018c:	4613      	mov	r3, r2
 800018e:	005b      	lsls	r3, r3, #1
 8000190:	4413      	add	r3, r2
 8000192:	440b      	add	r3, r1
 8000194:	f203 43ef 	addw	r3, r3, #1263	; 0x4ef
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	e00d      	b.n	80001b8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
 800019c:	7bbb      	ldrb	r3, [r7, #14]
 800019e:	2b02      	cmp	r3, #2
 80001a0:	d109      	bne.n	80001b6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6a>
							: 	(j == 2) ? NeoPixel::colors[i].blue : 0;
 80001a2:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 80001a4:	6879      	ldr	r1, [r7, #4]
 80001a6:	4613      	mov	r3, r2
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	4413      	add	r3, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	f203 43f1 	addw	r3, r3, #1265	; 0x4f1
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	e000      	b.n	80001b8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
 80001b6:	2300      	movs	r3, #0
 80001b8:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	737b      	strb	r3, [r7, #13]
 80001be:	7b7b      	ldrb	r3, [r7, #13]
 80001c0:	2b07      	cmp	r3, #7
 80001c2:	d81c      	bhi.n	80001fe <_ZN6ws28128NeoPixel19update_write_bufferEv+0xb2>
				NeoPixel::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? NeoPixel::high : NeoPixel::low;
 80001c4:	7b3a      	ldrb	r2, [r7, #12]
 80001c6:	7b7b      	ldrb	r3, [r7, #13]
 80001c8:	2180      	movs	r1, #128	; 0x80
 80001ca:	fa41 f303 	asr.w	r3, r1, r3
 80001ce:	4013      	ands	r3, r2
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	dd02      	ble.n	80001da <_ZN6ws28128NeoPixel19update_write_bufferEv+0x8e>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	7b1a      	ldrb	r2, [r3, #12]
 80001d8:	e001      	b.n	80001de <_ZN6ws28128NeoPixel19update_write_bufferEv+0x92>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	7b5a      	ldrb	r2, [r3, #13]
 80001de:	7bf9      	ldrb	r1, [r7, #15]
 80001e0:	460b      	mov	r3, r1
 80001e2:	005b      	lsls	r3, r3, #1
 80001e4:	4419      	add	r1, r3
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	440b      	add	r3, r1
 80001ea:	00d9      	lsls	r1, r3, #3
 80001ec:	7b7b      	ldrb	r3, [r7, #13]
 80001ee:	440b      	add	r3, r1
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	440b      	add	r3, r1
 80001f4:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80001f6:	7b7b      	ldrb	r3, [r7, #13]
 80001f8:	3301      	adds	r3, #1
 80001fa:	737b      	strb	r3, [r7, #13]
 80001fc:	e7df      	b.n	80001be <_ZN6ws28128NeoPixel19update_write_bufferEv+0x72>
		for(uint8_t j = 0; j < color_num; j++){
 80001fe:	7bbb      	ldrb	r3, [r7, #14]
 8000200:	3301      	adds	r3, #1
 8000202:	73bb      	strb	r3, [r7, #14]
 8000204:	e7ad      	b.n	8000162 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	3301      	adds	r3, #1
 800020a:	73fb      	strb	r3, [r7, #15]
 800020c:	e7a4      	b.n	8000158 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc>
			}
		}
	}
	NeoPixel::write_buffer[data_len] = 0;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
}
 8000216:	bf00      	nop
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <_ZN6ws28128NeoPixel4rendEv>:

void NeoPixel::rend(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff8f 	bl	800014c <_ZN6ws28128NeoPixel19update_write_bufferEv>
	if(NeoPixel::hdma->State != HAL_DMA_STATE_READY) {
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000236:	2b01      	cmp	r3, #1
 8000238:	d007      	beq.n	800024a <_ZN6ws28128NeoPixel4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(NeoPixel::htim, NeoPixel::Channel);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	4619      	mov	r1, r3
 8000244:	4610      	mov	r0, r2
 8000246:	f003 fffb 	bl	8004240 <HAL_TIM_PWM_Stop_DMA>
//		 return;
  	}
	HAL_TIM_PWM_Start_DMA(NeoPixel::htim, NeoPixel::Channel, (uint32_t*)NeoPixel::write_buffer, data_len + reset_bit);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6818      	ldr	r0, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6859      	ldr	r1, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f103 020e 	add.w	r2, r3, #14
 8000258:	f240 43e1 	movw	r3, #1249	; 0x4e1
 800025c:	f003 fe56 	bl	8003f0c <HAL_TIM_PWM_Start_DMA>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

NeoPixel::NeoPixel(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
 8000274:	603b      	str	r3, [r7, #0]
	// TODO Auto-generated constructor stub
	NeoPixel::htim = htim;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	68ba      	ldr	r2, [r7, #8]
 800027a:	601a      	str	r2, [r3, #0]
	NeoPixel::Channel = Channel;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
	NeoPixel::hdma = hdma;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	683a      	ldr	r2, [r7, #0]
 8000286:	609a      	str	r2, [r3, #8]
	NeoPixel::high = high_level_pulse_len;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	7e3a      	ldrb	r2, [r7, #24]
 800028c:	731a      	strb	r2, [r3, #12]
	NeoPixel::low = low_level_pulse_len;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	7f3a      	ldrb	r2, [r7, #28]
 8000292:	735a      	strb	r2, [r3, #13]
}
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	4618      	mov	r0, r3
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	f5ad 5db3 	sub.w	sp, sp, #5728	; 0x1660
 80002a6:	b081      	sub	sp, #4
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fed3 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f93d 	bl	800052c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 fb99 	bl	80009e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80002b6:	f000 fb49 	bl	800094c <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 80002ba:	f000 f9a1 	bl	8000600 <_ZL12MX_TIM1_Initv>
  MX_USB_DEVICE_Init();
 80002be:	f008 fdf1 	bl	8008ea4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80002c2:	f000 fa55 	bl	8000770 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 80002c6:	f000 fad9 	bl	800087c <_ZL12MX_TIM4_Initv>
  ws2812::NeoPixel pixels[] = {
		  ws2812::NeoPixel(&htim1, TIM_CHANNEL_1, &hdma_tim1_ch1, 45, 22),
		  ws2812::NeoPixel(&htim1, TIM_CHANNEL_2, &hdma_tim1_ch2, 45, 22),
		  ws2812::NeoPixel(&htim1, TIM_CHANNEL_3, &hdma_tim1_ch3, 45, 22),
		  ws2812::NeoPixel(&htim4, TIM_CHANNEL_2, &hdma_tim1_ch2, 45, 22)
  };
 80002ca:	f107 0418 	add.w	r4, r7, #24
 80002ce:	2316      	movs	r3, #22
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	232d      	movs	r3, #45	; 0x2d
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	4b8d      	ldr	r3, [pc, #564]	; (800050c <main+0x26c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	498d      	ldr	r1, [pc, #564]	; (8000510 <main+0x270>)
 80002dc:	4620      	mov	r0, r4
 80002de:	f7ff ffc3 	bl	8000268 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>
 80002e2:	f204 548c 	addw	r4, r4, #1420	; 0x58c
 80002e6:	2316      	movs	r3, #22
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	232d      	movs	r3, #45	; 0x2d
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	4b89      	ldr	r3, [pc, #548]	; (8000514 <main+0x274>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	4987      	ldr	r1, [pc, #540]	; (8000510 <main+0x270>)
 80002f4:	4620      	mov	r0, r4
 80002f6:	f7ff ffb7 	bl	8000268 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>
 80002fa:	f204 548c 	addw	r4, r4, #1420	; 0x58c
 80002fe:	2316      	movs	r3, #22
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	232d      	movs	r3, #45	; 0x2d
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	4b84      	ldr	r3, [pc, #528]	; (8000518 <main+0x278>)
 8000308:	2208      	movs	r2, #8
 800030a:	4981      	ldr	r1, [pc, #516]	; (8000510 <main+0x270>)
 800030c:	4620      	mov	r0, r4
 800030e:	f7ff ffab 	bl	8000268 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>
 8000312:	f204 508c 	addw	r0, r4, #1420	; 0x58c
 8000316:	2316      	movs	r3, #22
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	232d      	movs	r3, #45	; 0x2d
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	4b7d      	ldr	r3, [pc, #500]	; (8000514 <main+0x274>)
 8000320:	2204      	movs	r2, #4
 8000322:	497e      	ldr	r1, [pc, #504]	; (800051c <main+0x27c>)
 8000324:	f7ff ffa0 	bl	8000268 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  constexpr ws2812::color _yellow = {48, 24, 0};
 8000328:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800032c:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8000330:	4a7b      	ldr	r2, [pc, #492]	; (8000520 <main+0x280>)
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	4611      	mov	r1, r2
 8000336:	8019      	strh	r1, [r3, #0]
 8000338:	3302      	adds	r3, #2
 800033a:	0c12      	lsrs	r2, r2, #16
 800033c:	701a      	strb	r2, [r3, #0]
  constexpr ws2812::color _blue   = {0, 24, 128};
 800033e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000342:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8000346:	4a77      	ldr	r2, [pc, #476]	; (8000524 <main+0x284>)
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	4611      	mov	r1, r2
 800034c:	8019      	strh	r1, [r3, #0]
 800034e:	3302      	adds	r3, #2
 8000350:	0c12      	lsrs	r2, r2, #16
 8000352:	701a      	strb	r2, [r3, #0]
  constexpr ws2812::color _green  = {0, 48, 0};
 8000354:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000358:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000364:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8000368:	2230      	movs	r2, #48	; 0x30
 800036a:	705a      	strb	r2, [r3, #1]
 800036c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000370:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8000374:	2200      	movs	r2, #0
 8000376:	709a      	strb	r2, [r3, #2]
  constexpr ws2812::color _red    = {48, 0, 0};
 8000378:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800037c:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8000380:	2230      	movs	r2, #48	; 0x30
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000388:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 800038c:	2200      	movs	r2, #0
 800038e:	705a      	strb	r2, [r3, #1]
 8000390:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000394:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8000398:	2200      	movs	r2, #0
 800039a:	709a      	strb	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    int input_emkl = HAL_GPIO_ReadPin(input_emkl_GPIO_Port, input_emkl_Pin);
 800039c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a0:	4861      	ldr	r0, [pc, #388]	; (8000528 <main+0x288>)
 80003a2:	f001 fbd3 	bl	8001b4c <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80003ac:	f102 020c 	add.w	r2, r2, #12
 80003b0:	6013      	str	r3, [r2, #0]
    int input_stop = HAL_GPIO_ReadPin(input_stop_GPIO_Port, input_stop_Pin);
 80003b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b6:	485c      	ldr	r0, [pc, #368]	; (8000528 <main+0x288>)
 80003b8:	f001 fbc8 	bl	8001b4c <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80003c2:	f102 0208 	add.w	r2, r2, #8
 80003c6:	6013      	str	r3, [r2, #0]
	  if(input_emkl){
 80003c8:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80003cc:	f103 030c 	add.w	r3, r3, #12
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d00e      	beq.n	80003f4 <main+0x154>
      light_color = _red;
 80003d6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80003da:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 80003de:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80003e2:	f5a2 62ca 	sub.w	r2, r2, #1616	; 0x650
 80003e6:	6812      	ldr	r2, [r2, #0]
 80003e8:	4611      	mov	r1, r2
 80003ea:	8019      	strh	r1, [r3, #0]
 80003ec:	3302      	adds	r3, #2
 80003ee:	0c12      	lsrs	r2, r2, #16
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	e023      	b.n	800043c <main+0x19c>
    }else if(input_stop){
 80003f4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80003f8:	f103 0308 	add.w	r3, r3, #8
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d00e      	beq.n	8000420 <main+0x180>
      light_color = _yellow;
 8000402:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000406:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 800040a:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800040e:	f2a2 6244 	subw	r2, r2, #1604	; 0x644
 8000412:	6812      	ldr	r2, [r2, #0]
 8000414:	4611      	mov	r1, r2
 8000416:	8019      	strh	r1, [r3, #0]
 8000418:	3302      	adds	r3, #2
 800041a:	0c12      	lsrs	r2, r2, #16
 800041c:	701a      	strb	r2, [r3, #0]
 800041e:	e00d      	b.n	800043c <main+0x19c>
    }else{
      light_color = _blue;
 8000420:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000424:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8000428:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800042c:	f5a2 62c9 	sub.w	r2, r2, #1608	; 0x648
 8000430:	6812      	ldr	r2, [r2, #0]
 8000432:	4611      	mov	r1, r2
 8000434:	8019      	strh	r1, [r3, #0]
 8000436:	3302      	adds	r3, #2
 8000438:	0c12      	lsrs	r2, r2, #16
 800043a:	701a      	strb	r2, [r3, #0]
    }
	for(int i = 0; i < 4; i++){
 800043c:	2300      	movs	r3, #0
 800043e:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8000442:	f102 0214 	add.w	r2, r2, #20
 8000446:	6013      	str	r3, [r2, #0]
 8000448:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800044c:	f103 0314 	add.w	r3, r3, #20
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b03      	cmp	r3, #3
 8000454:	dc55      	bgt.n	8000502 <main+0x262>
	  for(int j = 0; j < 52; j++){
 8000456:	2300      	movs	r3, #0
 8000458:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 800045c:	f102 0210 	add.w	r2, r2, #16
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8000466:	f103 0310 	add.w	r3, r3, #16
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b33      	cmp	r3, #51	; 0x33
 800046e:	dc2d      	bgt.n	80004cc <main+0x22c>
		  pixels[i].colors[j] = light_color;
 8000470:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000474:	f5a3 61c8 	sub.w	r1, r3, #1600	; 0x640
 8000478:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800047c:	f103 0310 	add.w	r3, r3, #16
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 8000486:	f103 0314 	add.w	r3, r3, #20
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	4613      	mov	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	4413      	add	r3, r2
 8000492:	f240 528c 	movw	r2, #1420	; 0x58c
 8000496:	fb00 f202 	mul.w	r2, r0, r2
 800049a:	4413      	add	r3, r2
 800049c:	440b      	add	r3, r1
 800049e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80004a2:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80004a6:	f2a2 6254 	subw	r2, r2, #1620	; 0x654
 80004aa:	3307      	adds	r3, #7
 80004ac:	8811      	ldrh	r1, [r2, #0]
 80004ae:	7892      	ldrb	r2, [r2, #2]
 80004b0:	8019      	strh	r1, [r3, #0]
 80004b2:	709a      	strb	r2, [r3, #2]
	  for(int j = 0; j < 52; j++){
 80004b4:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80004b8:	f103 0310 	add.w	r3, r3, #16
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3301      	adds	r3, #1
 80004c0:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80004c4:	f102 0210 	add.w	r2, r2, #16
 80004c8:	6013      	str	r3, [r2, #0]
 80004ca:	e7ca      	b.n	8000462 <main+0x1c2>
	  }
	  pixels[i].rend();
 80004cc:	f107 0218 	add.w	r2, r7, #24
 80004d0:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80004d4:	f103 0314 	add.w	r3, r3, #20
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f240 518c 	movw	r1, #1420	; 0x58c
 80004de:	fb01 f303 	mul.w	r3, r1, r3
 80004e2:	4413      	add	r3, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fe9b 	bl	8000220 <_ZN6ws28128NeoPixel4rendEv>
	for(int i = 0; i < 4; i++){
 80004ea:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80004ee:	f103 0314 	add.w	r3, r3, #20
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80004fa:	f102 0214 	add.w	r2, r2, #20
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	e7a2      	b.n	8000448 <main+0x1a8>
	}
	HAL_Delay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fe08 	bl	8001118 <HAL_Delay>
  }
 8000508:	e748      	b.n	800039c <main+0xfc>
 800050a:	bf00      	nop
 800050c:	20000270 	.word	0x20000270
 8000510:	20000198 	.word	0x20000198
 8000514:	200002b4 	.word	0x200002b4
 8000518:	200002f8 	.word	0x200002f8
 800051c:	20000228 	.word	0x20000228
 8000520:	08009800 	.word	0x08009800
 8000524:	08009804 	.word	0x08009804
 8000528:	40010c00 	.word	0x40010c00

0800052c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f009 f94c 	bl	80097d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000578:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000582:	4618      	mov	r0, r3
 8000584:	f002 ffd4 	bl	8003530 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000598:	f000 fa8a 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2102      	movs	r1, #2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fa3b 	bl	8003a34 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf14      	ite	ne
 80005c4:	2301      	movne	r3, #1
 80005c6:	2300      	moveq	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80005ce:	f000 fa6f 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d2:	2310      	movs	r3, #16
 80005d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fb8f 	bl	8003d00 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf14      	ite	ne
 80005e8:	2301      	movne	r3, #1
 80005ea:	2300      	moveq	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80005f2:	f000 fa5d 	bl	8000ab0 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b092      	sub	sp, #72	; 0x48
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]
 8000622:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2220      	movs	r2, #32
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f009 f8d4 	bl	80097d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000630:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000632:	4a4e      	ldr	r2, [pc, #312]	; (800076c <_ZL12MX_TIM1_Initv+0x16c>)
 8000634:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b4a      	ldr	r3, [pc, #296]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000644:	2259      	movs	r2, #89	; 0x59
 8000646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b47      	ldr	r3, [pc, #284]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b44      	ldr	r3, [pc, #272]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800065a:	4843      	ldr	r0, [pc, #268]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 800065c:	f003 fc06 	bl	8003e6c <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8000670:	f000 fa1e 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800067c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000680:	4619      	mov	r1, r3
 8000682:	4839      	ldr	r0, [pc, #228]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000684:	f004 fa52 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf14      	ite	ne
 800068e:	2301      	movne	r3, #1
 8000690:	2300      	moveq	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8000698:	f000 fa0a 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069c:	2360      	movs	r3, #96	; 0x60
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 80006c2:	f003 fe7b 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 80006d6:	f000 f9eb 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	2204      	movs	r2, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 80006e4:	f003 fe6a 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <_ZL12MX_TIM1_Initv+0xfc>
  {
    Error_Handler();
 80006f8:	f000 f9da 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	2208      	movs	r2, #8
 8000702:	4619      	mov	r1, r3
 8000704:	4818      	ldr	r0, [pc, #96]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000706:	f003 fe59 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <_ZL12MX_TIM1_Initv+0x11e>
  {
    Error_Handler();
 800071a:	f000 f9c9 	bl	8000ab0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 8000742:	f004 fa51 	bl	8004be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_ZL12MX_TIM1_Initv+0x15a>
  {
    Error_Handler();
 8000756:	f000 f9ab 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075a:	4803      	ldr	r0, [pc, #12]	; (8000768 <_ZL12MX_TIM1_Initv+0x168>)
 800075c:	f000 fb62 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3748      	adds	r7, #72	; 0x48
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000198 	.word	0x20000198
 800076c:	40012c00 	.word	0x40012c00

08000770 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b35      	ldr	r3, [pc, #212]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 80007a8:	2259      	movs	r2, #89	; 0x59
 80007aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b8:	482f      	ldr	r0, [pc, #188]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 80007ba:	f003 fb57 	bl	8003e6c <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2301      	movne	r3, #1
 80007c6:	2300      	moveq	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 80007ce:	f000 f96f 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4619      	mov	r1, r3
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 80007e2:	f004 f9a3 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80007f6:	f000 f95b 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fa:	2360      	movs	r3, #96	; 0x60
 80007fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 8000812:	f003 fdd3 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 8000826:	f000 f943 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2204      	movs	r2, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 8000832:	f003 fdc3 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000846:	f000 f933 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2208      	movs	r2, #8
 800084e:	4619      	mov	r1, r3
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 8000852:	f003 fdb3 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf14      	ite	ne
 800085c:	2301      	movne	r3, #1
 800085e:	2300      	moveq	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 8000866:	f000 f923 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <_ZL12MX_TIM2_Initv+0x108>)
 800086c:	f000 fada 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001e0 	.word	0x200001e0

0800087c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <_ZL12MX_TIM4_Initv+0xcc>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008b2:	2259      	movs	r2, #89	; 0x59
 80008b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c2:	4820      	ldr	r0, [pc, #128]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008c4:	f003 fad2 	bl	8003e6c <HAL_TIM_PWM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <_ZL12MX_TIM4_Initv+0x60>
  {
    Error_Handler();
 80008d8:	f000 f8ea 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4619      	mov	r1, r3
 80008ea:	4816      	ldr	r0, [pc, #88]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 80008ec:	f004 f91e 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8000900:	f000 f8d6 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2360      	movs	r3, #96	; 0x60
 8000906:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2204      	movs	r2, #4
 8000918:	4619      	mov	r1, r3
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 800091c:	f003 fd4e 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf14      	ite	ne
 8000926:	2301      	movne	r3, #1
 8000928:	2300      	moveq	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <_ZL12MX_TIM4_Initv+0xb8>
  {
    Error_Handler();
 8000930:	f000 f8be 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <_ZL12MX_TIM4_Initv+0xc8>)
 8000936:	f000 fa75 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000228 	.word	0x20000228
 8000948:	40000800 	.word	0x40000800

0800094c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <_ZL11MX_DMA_Initv+0x98>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <_ZL11MX_DMA_Initv+0x98>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <_ZL11MX_DMA_Initv+0x98>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	200b      	movs	r0, #11
 8000970:	f000 fccd 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000974:	200b      	movs	r0, #11
 8000976:	f000 fce6 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200c      	movs	r0, #12
 8000980:	f000 fcc5 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000984:	200c      	movs	r0, #12
 8000986:	f000 fcde 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	200d      	movs	r0, #13
 8000990:	f000 fcbd 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000994:	200d      	movs	r0, #13
 8000996:	f000 fcd6 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200e      	movs	r0, #14
 80009a0:	f000 fcb5 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009a4:	200e      	movs	r0, #14
 80009a6:	f000 fcce 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 fcad 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009b4:	200f      	movs	r0, #15
 80009b6:	f000 fcc6 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2010      	movs	r0, #16
 80009c0:	f000 fca5 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009c4:	2010      	movs	r0, #16
 80009c6:	f000 fcbe 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2011      	movs	r0, #17
 80009d0:	f000 fc9d 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009d4:	2011      	movs	r0, #17
 80009d6:	f000 fcb6 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_ZL12MX_GPIO_Initv+0xc0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <_ZL12MX_GPIO_Initv+0xc4>)
 8000a64:	f001 f889 	bl	8001b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input_stop_Pin input_emkl_Pin */
  GPIO_InitStruct.Pin = input_stop_Pin|input_emkl_Pin;
 8000a68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <_ZL12MX_GPIO_Initv+0xc4>)
 8000a7e:	f000 fee1 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <_ZL12MX_GPIO_Initv+0xc4>)
 8000a9c:	f000 fed2 	bl	8001844 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x5c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_MspInit+0x60>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_MspInit+0x60>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a8c      	ldr	r2, [pc, #560]	; (8000d60 <HAL_TIM_PWM_MspInit+0x240>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	f040 8085 	bne.w	8000c3e <HAL_TIM_PWM_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b34:	4b8b      	ldr	r3, [pc, #556]	; (8000d64 <HAL_TIM_PWM_MspInit+0x244>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a8a      	ldr	r2, [pc, #552]	; (8000d64 <HAL_TIM_PWM_MspInit+0x244>)
 8000b3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b88      	ldr	r3, [pc, #544]	; (8000d64 <HAL_TIM_PWM_MspInit+0x244>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000b4c:	4b86      	ldr	r3, [pc, #536]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b4e:	4a87      	ldr	r2, [pc, #540]	; (8000d6c <HAL_TIM_PWM_MspInit+0x24c>)
 8000b50:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b52:	4b85      	ldr	r3, [pc, #532]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b54:	2210      	movs	r2, #16
 8000b56:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b58:	4b83      	ldr	r3, [pc, #524]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b5e:	4b82      	ldr	r3, [pc, #520]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b64:	4b80      	ldr	r3, [pc, #512]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6c:	4b7e      	ldr	r3, [pc, #504]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000b72:	4b7d      	ldr	r3, [pc, #500]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b78:	4b7b      	ldr	r3, [pc, #492]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b80:	4879      	ldr	r0, [pc, #484]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b82:	f000 fbfb 	bl	800137c <HAL_DMA_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8000b8c:	f7ff ff90 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a75      	ldr	r2, [pc, #468]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
 8000b96:	4a74      	ldr	r2, [pc, #464]	; (8000d68 <HAL_TIM_PWM_MspInit+0x248>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8000b9c:	4b74      	ldr	r3, [pc, #464]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000b9e:	4a75      	ldr	r2, [pc, #468]	; (8000d74 <HAL_TIM_PWM_MspInit+0x254>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ba2:	4b73      	ldr	r3, [pc, #460]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b70      	ldr	r3, [pc, #448]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb4:	4b6e      	ldr	r3, [pc, #440]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bba:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bbc:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000bc2:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000bd0:	4867      	ldr	r0, [pc, #412]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000bd2:	f000 fbd3 	bl	800137c <HAL_DMA_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_TIM_PWM_MspInit+0xc0>
    {
      Error_Handler();
 8000bdc:	f7ff ff68 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a63      	ldr	r2, [pc, #396]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
 8000be6:	4a62      	ldr	r2, [pc, #392]	; (8000d70 <HAL_TIM_PWM_MspInit+0x250>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8000bec:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000bee:	4a63      	ldr	r2, [pc, #396]	; (8000d7c <HAL_TIM_PWM_MspInit+0x25c>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf2:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf8:	4b5f      	ldr	r3, [pc, #380]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000bfe:	4b5e      	ldr	r3, [pc, #376]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c04:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000c12:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000c20:	4855      	ldr	r0, [pc, #340]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c22:	f000 fbab 	bl	800137c <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_TIM_PWM_MspInit+0x110>
    {
      Error_Handler();
 8000c2c:	f7ff ff40 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a51      	ldr	r2, [pc, #324]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c36:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <HAL_TIM_PWM_MspInit+0x258>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c3c:	e0e5      	b.n	8000e0a <HAL_TIM_PWM_MspInit+0x2ea>
  else if(htim_pwm->Instance==TIM2)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c46:	f040 80a7 	bne.w	8000d98 <HAL_TIM_PWM_MspInit+0x278>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	4b46      	ldr	r3, [pc, #280]	; (8000d64 <HAL_TIM_PWM_MspInit+0x244>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a45      	ldr	r2, [pc, #276]	; (8000d64 <HAL_TIM_PWM_MspInit+0x244>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <HAL_TIM_PWM_MspInit+0x244>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000c62:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c64:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <HAL_TIM_PWM_MspInit+0x264>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c68:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c82:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c8e:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000c96:	483a      	ldr	r0, [pc, #232]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000c98:	f000 fb70 	bl	800137c <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_TIM_PWM_MspInit+0x186>
      Error_Handler();
 8000ca2:	f7ff ff05 	bl	8000ab0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a35      	ldr	r2, [pc, #212]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
 8000cac:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_TIM_PWM_MspInit+0x260>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cb4:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <HAL_TIM_PWM_MspInit+0x26c>)
 8000cb6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cba:	2210      	movs	r2, #16
 8000cbc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000ce6:	4828      	ldr	r0, [pc, #160]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000ce8:	f000 fb48 	bl	800137c <HAL_DMA_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_TIM_PWM_MspInit+0x1d6>
      Error_Handler();
 8000cf2:	f7ff fedd 	bl	8000ab0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_TIM_PWM_MspInit+0x268>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_TIM_PWM_MspInit+0x274>)
 8000d12:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d44:	f000 fb1a 	bl	800137c <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_TIM_PWM_MspInit+0x232>
      Error_Handler();
 8000d4e:	f7ff feaf 	bl	8000ab0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_TIM_PWM_MspInit+0x270>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d5e:	e054      	b.n	8000e0a <HAL_TIM_PWM_MspInit+0x2ea>
 8000d60:	40012c00 	.word	0x40012c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	20000270 	.word	0x20000270
 8000d6c:	4002001c 	.word	0x4002001c
 8000d70:	200002b4 	.word	0x200002b4
 8000d74:	40020030 	.word	0x40020030
 8000d78:	200002f8 	.word	0x200002f8
 8000d7c:	4002006c 	.word	0x4002006c
 8000d80:	2000033c 	.word	0x2000033c
 8000d84:	40020058 	.word	0x40020058
 8000d88:	20000380 	.word	0x20000380
 8000d8c:	40020080 	.word	0x40020080
 8000d90:	200003c4 	.word	0x200003c4
 8000d94:	40020008 	.word	0x40020008
  else if(htim_pwm->Instance==TIM4)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_TIM_PWM_MspInit+0x2f4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d133      	bne.n	8000e0a <HAL_TIM_PWM_MspInit+0x2ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_TIM_PWM_MspInit+0x2f8>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <HAL_TIM_PWM_MspInit+0x2f8>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_TIM_PWM_MspInit+0x2f8>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000dbc:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_TIM_PWM_MspInit+0x300>)
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000df0:	f000 fac4 	bl	800137c <HAL_DMA_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_TIM_PWM_MspInit+0x2de>
      Error_Handler();
 8000dfa:	f7ff fe59 	bl	8000ab0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <HAL_TIM_PWM_MspInit+0x2fc>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40000800 	.word	0x40000800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	20000408 	.word	0x20000408
 8000e20:	40020044 	.word	0x40020044

08000e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a2e      	ldr	r2, [pc, #184]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d119      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2302      	movs	r3, #2
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4823      	ldr	r0, [pc, #140]	; (8000f00 <HAL_TIM_MspPostInit+0xdc>)
 8000e72:	f000 fce7 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e76:	e03a      	b.n	8000eee <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d118      	bne.n	8000eb4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4814      	ldr	r0, [pc, #80]	; (8000f00 <HAL_TIM_MspPostInit+0xdc>)
 8000eae:	f000 fcc9 	bl	8001844 <HAL_GPIO_Init>
}
 8000eb2:	e01c      	b.n	8000eee <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <HAL_TIM_MspPostInit+0xe0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d117      	bne.n	8000eee <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <HAL_TIM_MspPostInit+0xe4>)
 8000eea:	f000 fcab 	bl	8001844 <HAL_GPIO_Init>
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40012c00 	.word	0x40012c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40000800 	.word	0x40000800
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f8c5 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Channel1_IRQHandler+0x10>)
 8000f62:	f000 fb3b 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200003c4 	.word	0x200003c4

08000f70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <DMA1_Channel2_IRQHandler+0x10>)
 8000f76:	f000 fb31 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000270 	.word	0x20000270

08000f84 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <DMA1_Channel3_IRQHandler+0x10>)
 8000f8a:	f000 fb27 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002b4 	.word	0x200002b4

08000f98 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel4_IRQHandler+0x10>)
 8000f9e:	f000 fb1d 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000408 	.word	0x20000408

08000fac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Channel5_IRQHandler+0x10>)
 8000fb2:	f000 fb13 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000033c 	.word	0x2000033c

08000fc0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Channel6_IRQHandler+0x10>)
 8000fc6:	f000 fb09 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002f8 	.word	0x200002f8

08000fd4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel7_IRQHandler+0x10>)
 8000fda:	f000 faff 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000380 	.word	0x20000380

08000fe8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fee:	f000 ff0d 	bl	8001e0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200010e8 	.word	0x200010e8

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800102e:	f7ff ffe5 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f008 fbad 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff f933 	bl	80002a0 <main>
  bx lr
 800103a:	4770      	bx	lr
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001044:	08009878 	.word	0x08009878
  ldr r2, =_sbss
 8001048:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800104c:	200015f4 	.word	0x200015f4

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f947 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fd24 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f95f 	bl	8001362 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f927 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x20>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000044c 	.word	0x2000044c

08001104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	2000044c 	.word	0x2000044c

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff0 	bl	8001104 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffe0 	bl	8001104 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <__NVIC_EnableIRQ+0x34>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff90 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff2d 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff42 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff90 	bl	8001250 <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5f 	bl	80011fc <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff35 	bl	80011c4 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e043      	b.n	800141a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_DMA_Init+0xa8>)
 800139a:	4413      	add	r3, r2
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <HAL_DMA_Init+0xac>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <HAL_DMA_Init+0xb0>)
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	bffdfff8 	.word	0xbffdfff8
 8001428:	cccccccd 	.word	0xcccccccd
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_DMA_Start_IT+0x20>
 800144c:	2302      	movs	r3, #2
 800144e:	e04a      	b.n	80014e6 <HAL_DMA_Start_IT+0xb6>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800145e:	2b01      	cmp	r3, #1
 8001460:	d13a      	bne.n	80014d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f9ae 	bl	80017e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 020e 	orr.w	r2, r2, #14
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e00f      	b.n	80014c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0204 	bic.w	r2, r2, #4
 80014b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 020a 	orr.w	r2, r2, #10
 80014c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e005      	b.n	80014e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014e0:	2302      	movs	r3, #2
 80014e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001502:	2b02      	cmp	r3, #2
 8001504:	d005      	beq.n	8001512 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2204      	movs	r2, #4
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e051      	b.n	80015b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 020e 	bic.w	r2, r2, #14
 8001520:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_DMA_Abort_IT+0xd0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d029      	beq.n	8001590 <HAL_DMA_Abort_IT+0xa0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_DMA_Abort_IT+0xd4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d022      	beq.n	800158c <HAL_DMA_Abort_IT+0x9c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_DMA_Abort_IT+0xd8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d01a      	beq.n	8001586 <HAL_DMA_Abort_IT+0x96>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_DMA_Abort_IT+0xdc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <HAL_DMA_Abort_IT+0x90>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_DMA_Abort_IT+0xe0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00a      	beq.n	800157a <HAL_DMA_Abort_IT+0x8a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_DMA_Abort_IT+0xe4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <HAL_DMA_Abort_IT+0x84>
 800156e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001572:	e00e      	b.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001578:	e00b      	b.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 800157a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157e:	e008      	b.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	e005      	b.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 8001586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158a:	e002      	b.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 800158c:	2310      	movs	r3, #16
 800158e:	e000      	b.n	8001592 <HAL_DMA_Abort_IT+0xa2>
 8001590:	2301      	movs	r3, #1
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_DMA_Abort_IT+0xe8>)
 8001594:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	4798      	blx	r3
    } 
  }
  return status;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40020008 	.word	0x40020008
 80015c4:	4002001c 	.word	0x4002001c
 80015c8:	40020030 	.word	0x40020030
 80015cc:	40020044 	.word	0x40020044
 80015d0:	40020058 	.word	0x40020058
 80015d4:	4002006c 	.word	0x4002006c
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2204      	movs	r2, #4
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d04f      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xc8>
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d04a      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a66      	ldr	r2, [pc, #408]	; (80017cc <HAL_DMA_IRQHandler+0x1f0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d029      	beq.n	800168a <HAL_DMA_IRQHandler+0xae>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <HAL_DMA_IRQHandler+0x1f4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d022      	beq.n	8001686 <HAL_DMA_IRQHandler+0xaa>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_DMA_IRQHandler+0x1f8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d01a      	beq.n	8001680 <HAL_DMA_IRQHandler+0xa4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a62      	ldr	r2, [pc, #392]	; (80017d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d012      	beq.n	800167a <HAL_DMA_IRQHandler+0x9e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a60      	ldr	r2, [pc, #384]	; (80017dc <HAL_DMA_IRQHandler+0x200>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00a      	beq.n	8001674 <HAL_DMA_IRQHandler+0x98>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_DMA_IRQHandler+0x204>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <HAL_DMA_IRQHandler+0x92>
 8001668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166c:	e00e      	b.n	800168c <HAL_DMA_IRQHandler+0xb0>
 800166e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001672:	e00b      	b.n	800168c <HAL_DMA_IRQHandler+0xb0>
 8001674:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001678:	e008      	b.n	800168c <HAL_DMA_IRQHandler+0xb0>
 800167a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800167e:	e005      	b.n	800168c <HAL_DMA_IRQHandler+0xb0>
 8001680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001684:	e002      	b.n	800168c <HAL_DMA_IRQHandler+0xb0>
 8001686:	2340      	movs	r3, #64	; 0x40
 8001688:	e000      	b.n	800168c <HAL_DMA_IRQHandler+0xb0>
 800168a:	2304      	movs	r3, #4
 800168c:	4a55      	ldr	r2, [pc, #340]	; (80017e4 <HAL_DMA_IRQHandler+0x208>)
 800168e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8094 	beq.w	80017c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016a2:	e08e      	b.n	80017c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	2202      	movs	r2, #2
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d056      	beq.n	8001762 <HAL_DMA_IRQHandler+0x186>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d051      	beq.n	8001762 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10b      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020a 	bic.w	r2, r2, #10
 80016da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_DMA_IRQHandler+0x1f0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d029      	beq.n	8001742 <HAL_DMA_IRQHandler+0x166>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a37      	ldr	r2, [pc, #220]	; (80017d0 <HAL_DMA_IRQHandler+0x1f4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d022      	beq.n	800173e <HAL_DMA_IRQHandler+0x162>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a35      	ldr	r2, [pc, #212]	; (80017d4 <HAL_DMA_IRQHandler+0x1f8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01a      	beq.n	8001738 <HAL_DMA_IRQHandler+0x15c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d012      	beq.n	8001732 <HAL_DMA_IRQHandler+0x156>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_DMA_IRQHandler+0x200>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00a      	beq.n	800172c <HAL_DMA_IRQHandler+0x150>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a31      	ldr	r2, [pc, #196]	; (80017e0 <HAL_DMA_IRQHandler+0x204>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d102      	bne.n	8001726 <HAL_DMA_IRQHandler+0x14a>
 8001720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001724:	e00e      	b.n	8001744 <HAL_DMA_IRQHandler+0x168>
 8001726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172a:	e00b      	b.n	8001744 <HAL_DMA_IRQHandler+0x168>
 800172c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001730:	e008      	b.n	8001744 <HAL_DMA_IRQHandler+0x168>
 8001732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001736:	e005      	b.n	8001744 <HAL_DMA_IRQHandler+0x168>
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	e002      	b.n	8001744 <HAL_DMA_IRQHandler+0x168>
 800173e:	2320      	movs	r3, #32
 8001740:	e000      	b.n	8001744 <HAL_DMA_IRQHandler+0x168>
 8001742:	2302      	movs	r3, #2
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <HAL_DMA_IRQHandler+0x208>)
 8001746:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d034      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001760:	e02f      	b.n	80017c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	2208      	movs	r2, #8
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d028      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x1e8>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 020e 	bic.w	r2, r2, #14
 800178a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
    }
  }
  return;
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
}
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020008 	.word	0x40020008
 80017d0:	4002001c 	.word	0x4002001c
 80017d4:	40020030 	.word	0x40020030
 80017d8:	40020044 	.word	0x40020044
 80017dc:	40020058 	.word	0x40020058
 80017e0:	4002006c 	.word	0x4002006c
 80017e4:	40020000 	.word	0x40020000

080017e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b10      	cmp	r3, #16
 8001814:	d108      	bne.n	8001828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001826:	e007      	b.n	8001838 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	60da      	str	r2, [r3, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001856:	e169      	b.n	8001b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001858:	2201      	movs	r2, #1
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8158 	bne.w	8001b26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a9a      	ldr	r2, [pc, #616]	; (8001ae4 <HAL_GPIO_Init+0x2a0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d05e      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 8001880:	4a98      	ldr	r2, [pc, #608]	; (8001ae4 <HAL_GPIO_Init+0x2a0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d875      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 8001886:	4a98      	ldr	r2, [pc, #608]	; (8001ae8 <HAL_GPIO_Init+0x2a4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d058      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 800188c:	4a96      	ldr	r2, [pc, #600]	; (8001ae8 <HAL_GPIO_Init+0x2a4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d86f      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 8001892:	4a96      	ldr	r2, [pc, #600]	; (8001aec <HAL_GPIO_Init+0x2a8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d052      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 8001898:	4a94      	ldr	r2, [pc, #592]	; (8001aec <HAL_GPIO_Init+0x2a8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d869      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 800189e:	4a94      	ldr	r2, [pc, #592]	; (8001af0 <HAL_GPIO_Init+0x2ac>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d04c      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 80018a4:	4a92      	ldr	r2, [pc, #584]	; (8001af0 <HAL_GPIO_Init+0x2ac>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d863      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018aa:	4a92      	ldr	r2, [pc, #584]	; (8001af4 <HAL_GPIO_Init+0x2b0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d046      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 80018b0:	4a90      	ldr	r2, [pc, #576]	; (8001af4 <HAL_GPIO_Init+0x2b0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d85d      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d82a      	bhi.n	8001910 <HAL_GPIO_Init+0xcc>
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d859      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_GPIO_Init+0x80>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	0800193f 	.word	0x0800193f
 80018c8:	08001919 	.word	0x08001919
 80018cc:	0800192b 	.word	0x0800192b
 80018d0:	0800196d 	.word	0x0800196d
 80018d4:	08001973 	.word	0x08001973
 80018d8:	08001973 	.word	0x08001973
 80018dc:	08001973 	.word	0x08001973
 80018e0:	08001973 	.word	0x08001973
 80018e4:	08001973 	.word	0x08001973
 80018e8:	08001973 	.word	0x08001973
 80018ec:	08001973 	.word	0x08001973
 80018f0:	08001973 	.word	0x08001973
 80018f4:	08001973 	.word	0x08001973
 80018f8:	08001973 	.word	0x08001973
 80018fc:	08001973 	.word	0x08001973
 8001900:	08001973 	.word	0x08001973
 8001904:	08001973 	.word	0x08001973
 8001908:	08001921 	.word	0x08001921
 800190c:	08001935 	.word	0x08001935
 8001910:	4a79      	ldr	r2, [pc, #484]	; (8001af8 <HAL_GPIO_Init+0x2b4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001916:	e02c      	b.n	8001972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e029      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	3304      	adds	r3, #4
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e024      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	3308      	adds	r3, #8
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e01f      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	330c      	adds	r3, #12
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e01a      	b.n	8001974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001946:	2304      	movs	r3, #4
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e013      	b.n	8001974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	611a      	str	r2, [r3, #16]
          break;
 800195e:	e009      	b.n	8001974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001960:	2308      	movs	r3, #8
 8001962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	615a      	str	r2, [r3, #20]
          break;
 800196a:	e003      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x130>
          break;
 8001972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d801      	bhi.n	800197e <HAL_GPIO_Init+0x13a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	e001      	b.n	8001982 <HAL_GPIO_Init+0x13e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d802      	bhi.n	8001990 <HAL_GPIO_Init+0x14c>
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x152>
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3b08      	subs	r3, #8
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	210f      	movs	r1, #15
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80b1 	beq.w	8001b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x2b8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_GPIO_Init+0x2b8>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_GPIO_Init+0x2b8>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019dc:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <HAL_GPIO_Init+0x2bc>)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a40      	ldr	r2, [pc, #256]	; (8001b04 <HAL_GPIO_Init+0x2c0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d013      	beq.n	8001a30 <HAL_GPIO_Init+0x1ec>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3f      	ldr	r2, [pc, #252]	; (8001b08 <HAL_GPIO_Init+0x2c4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_GPIO_Init+0x1e8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3e      	ldr	r2, [pc, #248]	; (8001b0c <HAL_GPIO_Init+0x2c8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_GPIO_Init+0x1e4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3d      	ldr	r2, [pc, #244]	; (8001b10 <HAL_GPIO_Init+0x2cc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_GPIO_Init+0x1e0>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x1ee>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e004      	b.n	8001a32 <HAL_GPIO_Init+0x1ee>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x1ee>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_GPIO_Init+0x1ee>
 8001a30:	2300      	movs	r3, #0
 8001a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a34:	f002 0203 	and.w	r2, r2, #3
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	4093      	lsls	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a42:	492f      	ldr	r1, [pc, #188]	; (8001b00 <HAL_GPIO_Init+0x2bc>)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	492c      	ldr	r1, [pc, #176]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4928      	ldr	r1, [pc, #160]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4922      	ldr	r1, [pc, #136]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	491e      	ldr	r1, [pc, #120]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4918      	ldr	r1, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4914      	ldr	r1, [pc, #80]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d021      	beq.n	8001b18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e021      	b.n	8001b26 <HAL_GPIO_Init+0x2e2>
 8001ae2:	bf00      	nop
 8001ae4:	10320000 	.word	0x10320000
 8001ae8:	10310000 	.word	0x10310000
 8001aec:	10220000 	.word	0x10220000
 8001af0:	10210000 	.word	0x10210000
 8001af4:	10120000 	.word	0x10120000
 8001af8:	10110000 	.word	0x10110000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40011400 	.word	0x40011400
 8001b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f47f ae8e 	bne.w	8001858 <HAL_GPIO_Init+0x14>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	372c      	adds	r7, #44	; 0x2c
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]
 8001b86:	4613      	mov	r3, r2
 8001b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8a:	787b      	ldrb	r3, [r7, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b96:	e003      	b.n	8001ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bac:	b08b      	sub	sp, #44	; 0x2c
 8001bae:	af06      	add	r7, sp, #24
 8001bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0fd      	b.n	8001db8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d106      	bne.n	8001bd6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f007 fb33 	bl	800923c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 f877 	bl	8004cd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	687e      	ldr	r6, [r7, #4]
 8001bf0:	466d      	mov	r5, sp
 8001bf2:	f106 0410 	add.w	r4, r6, #16
 8001bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	602b      	str	r3, [r5, #0]
 8001bfe:	1d33      	adds	r3, r6, #4
 8001c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c02:	6838      	ldr	r0, [r7, #0]
 8001c04:	f003 f841 	bl	8004c8a <USB_CoreInit>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0ce      	b.n	8001db8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f872 	bl	8004d0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e04c      	b.n	8001cc6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	b298      	uxth	r0, r3
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	3336      	adds	r3, #54	; 0x36
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3303      	adds	r3, #3
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3338      	adds	r3, #56	; 0x38
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	333c      	adds	r3, #60	; 0x3c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3340      	adds	r3, #64	; 0x40
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3ad      	bcc.n	8001c2c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e044      	b.n	8001d60 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d3b5      	bcc.n	8001cd6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	687e      	ldr	r6, [r7, #4]
 8001d72:	466d      	mov	r5, sp
 8001d74:	f106 0410 	add.w	r4, r6, #16
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	602b      	str	r3, [r5, #0]
 8001d80:	1d33      	adds	r3, r6, #4
 8001d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d84:	6838      	ldr	r0, [r7, #0]
 8001d86:	f002 ffcc 	bl	8004d22 <USB_DevInit>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e00d      	b.n	8001db8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 fc7f 	bl	80076b4 <USB_DevDisconnect>

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_PCD_Start+0x16>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e016      	b.n	8001e04 <HAL_PCD_Start+0x44>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 ff61 	bl	8004caa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001de8:	2101      	movs	r1, #1
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f007 fc99 	bl	8009722 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fc53 	bl	80076a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f005 fc55 	bl	80076c8 <USB_ReadInterrupts>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e28:	d102      	bne.n	8001e30 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fb5f 	bl	80024ee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f005 fc47 	bl	80076c8 <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e44:	d112      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f007 fa67 	bl	8009332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f923 	bl	80020b2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 fc29 	bl	80076c8 <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e80:	d10b      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e94:	b292      	uxth	r2, r2
 8001e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f005 fc12 	bl	80076c8 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eae:	d10b      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 fbfb 	bl	80076c8 <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001edc:	d126      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0204 	bic.w	r2, r2, #4
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0208 	bic.w	r2, r2, #8
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f007 fa48 	bl	80093a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f26:	b292      	uxth	r2, r2
 8001f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f005 fbc9 	bl	80076c8 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f40:	f040 8082 	bne.w	8002048 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	77fb      	strb	r3, [r7, #31]
 8001f48:	e010      	b.n	8001f6c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	7ffb      	ldrb	r3, [r7, #31]
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	3320      	adds	r3, #32
 8001f60:	443b      	add	r3, r7
 8001f62:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001f66:	7ffb      	ldrb	r3, [r7, #31]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	77fb      	strb	r3, [r7, #31]
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d9eb      	bls.n	8001f4a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	b292      	uxth	r2, r2
 8001f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001fa2:	bf00      	nop
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f6      	beq.n	8001fa4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	77fb      	strb	r3, [r7, #31]
 8001fd2:	e00f      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001fd4:	7ffb      	ldrb	r3, [r7, #31]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	7ffa      	ldrb	r2, [r7, #31]
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	440a      	add	r2, r1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	3320      	adds	r3, #32
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001fec:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
 8001ff6:	2b07      	cmp	r3, #7
 8001ff8:	d9ec      	bls.n	8001fd4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0208 	orr.w	r2, r2, #8
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0204 	orr.w	r2, r2, #4
 800203c:	b292      	uxth	r2, r2
 800203e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f007 f994 	bl	8009370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f005 fb3b 	bl	80076c8 <USB_ReadInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205c:	d10e      	bne.n	800207c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002070:	b292      	uxth	r2, r2
 8002072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f007 f94d 	bl	8009316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f005 fb21 	bl	80076c8 <USB_ReadInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002090:	d10b      	bne.n	80020aa <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_PCD_SetAddress+0x1a>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e013      	b.n	80020f4 <HAL_PCD_SetAddress+0x42>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 fac8 	bl	800767a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	70fb      	strb	r3, [r7, #3]
 800210e:	460b      	mov	r3, r1
 8002110:	803b      	strh	r3, [r7, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800211a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da0e      	bge.n	8002140 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	705a      	strb	r2, [r3, #1]
 800213e:	e00e      	b.n	800215e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 0207 	and.w	r2, r3, #7
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800216a:	883a      	ldrh	r2, [r7, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	78ba      	ldrb	r2, [r7, #2]
 8002174:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002188:	78bb      	ldrb	r3, [r7, #2]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d102      	bne.n	8002194 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_PCD_EP_Open+0xa6>
 800219e:	2302      	movs	r3, #2
 80021a0:	e00e      	b.n	80021c0 <HAL_PCD_EP_Open+0xc4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fdd7 	bl	8004d64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021be:	7afb      	ldrb	r3, [r7, #11]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da0e      	bge.n	80021fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	705a      	strb	r2, [r3, #1]
 80021f8:	e00e      	b.n	8002218 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 0207 	and.w	r2, r3, #7
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	b2da      	uxtb	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_PCD_EP_Close+0x6a>
 800222e:	2302      	movs	r3, #2
 8002230:	e00e      	b.n	8002250 <HAL_PCD_EP_Close+0x88>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68f9      	ldr	r1, [r7, #12]
 8002240:	4618      	mov	r0, r3
 8002242:	f003 f8f9 	bl	8005438 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	460b      	mov	r3, r1
 8002266:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002298:	7afb      	ldrb	r3, [r7, #11]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022a4:	7afb      	ldrb	r3, [r7, #11]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6979      	ldr	r1, [r7, #20]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 faab 	bl	8005810 <USB_EPStartXfer>
 80022ba:	e005      	b.n	80022c8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6979      	ldr	r1, [r7, #20]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 faa4 	bl	8005810 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	f003 0207 	and.w	r2, r3, #7
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022f4:	681b      	ldr	r3, [r3, #0]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	460b      	mov	r3, r1
 800230e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2201      	movs	r2, #1
 800234a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	b2da      	uxtb	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002358:	7afb      	ldrb	r3, [r7, #11]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6979      	ldr	r1, [r7, #20]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fa51 	bl	8005810 <USB_EPStartXfer>
 800236e:	e005      	b.n	800237c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6979      	ldr	r1, [r7, #20]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fa4a 	bl	8005810 <USB_EPStartXfer>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0207 	and.w	r2, r3, #7
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d901      	bls.n	80023a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04c      	b.n	800243e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da0e      	bge.n	80023ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	705a      	strb	r2, [r3, #1]
 80023c8:	e00c      	b.n	80023e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_EP_SetStall+0x7e>
 8002400:	2302      	movs	r3, #2
 8002402:	e01c      	b.n	800243e <HAL_PCD_EP_SetStall+0xb8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	f005 f834 	bl	8007480 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f005 f959 	bl	80076e6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d901      	bls.n	8002464 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e040      	b.n	80024e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da0e      	bge.n	800248a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	705a      	strb	r2, [r3, #1]
 8002488:	e00e      	b.n	80024a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0207 	and.w	r2, r3, #7
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_PCD_EP_ClrStall+0x82>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e00e      	b.n	80024e6 <HAL_PCD_EP_ClrStall+0xa0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 f822 	bl	8007520 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08e      	sub	sp, #56	; 0x38
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024f6:	e2ec      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002500:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800250e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8161 	bne.w	80027da <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d152      	bne.n	80025c8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	81fb      	strh	r3, [r7, #14]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002542:	b29b      	uxth	r3, r3
 8002544:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3328      	adds	r3, #40	; 0x28
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	3302      	adds	r3, #2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	441a      	add	r2, r3
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f006 feaa 	bl	80092e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 829b 	beq.w	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 8296 	bne.w	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b292      	uxth	r2, r2
 80025ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025c6:	e284      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d034      	beq.n	800264c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	3306      	adds	r3, #6
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002620:	b29b      	uxth	r3, r3
 8002622:	f005 f8b0 	bl	8007786 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29a      	uxth	r2, r3
 800262e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002632:	4013      	ands	r3, r2
 8002634:	823b      	strh	r3, [r7, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	8a3a      	ldrh	r2, [r7, #16]
 800263c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002640:	b292      	uxth	r2, r2
 8002642:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f006 fe1f 	bl	8009288 <HAL_PCD_SetupStageCallback>
 800264a:	e242      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800264c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002650:	2b00      	cmp	r3, #0
 8002652:	f280 823e 	bge.w	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29a      	uxth	r2, r3
 800265e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002662:	4013      	ands	r3, r2
 8002664:	83bb      	strh	r3, [r7, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	8bba      	ldrh	r2, [r7, #28]
 800266c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002670:	b292      	uxth	r2, r2
 8002672:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	3306      	adds	r3, #6
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d019      	beq.n	80026dc <PCD_EP_ISR_Handler+0x1ee>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f005 f860 	bl	8007786 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	441a      	add	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026d4:	2100      	movs	r1, #0
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f006 fde8 	bl	80092ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 81f2 	bne.w	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <PCD_EP_ISR_Handler+0x24e>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29a      	uxth	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e02f      	b.n	800279c <PCD_EP_ISR_Handler+0x2ae>
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b3e      	cmp	r3, #62	; 0x3e
 8002742:	d813      	bhi.n	800276c <PCD_EP_ISR_Handler+0x27e>
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <PCD_EP_ISR_Handler+0x270>
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	3301      	adds	r3, #1
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	b29b      	uxth	r3, r3
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	b29a      	uxth	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	e017      	b.n	800279c <PCD_EP_ISR_Handler+0x2ae>
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <PCD_EP_ISR_Handler+0x298>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	3b01      	subs	r3, #1
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	b29b      	uxth	r3, r3
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	b29b      	uxth	r3, r3
 800278e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002796:	b29a      	uxth	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	827b      	strh	r3, [r7, #18]
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027b4:	827b      	strh	r3, [r7, #18]
 80027b6:	8a7b      	ldrh	r3, [r7, #18]
 80027b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027bc:	827b      	strh	r3, [r7, #18]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	8a7b      	ldrh	r3, [r7, #18]
 80027c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	8013      	strh	r3, [r2, #0]
 80027d8:	e17b      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f280 80ea 	bge.w	80029ca <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29a      	uxth	r2, r3
 8002808:	f640 738f 	movw	r3, #3983	; 0xf8f
 800280c:	4013      	ands	r3, r2
 800280e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002820:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002824:	b292      	uxth	r2, r2
 8002826:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002828:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	7b1b      	ldrb	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d122      	bne.n	800288c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	3306      	adds	r3, #6
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8087 	beq.w	8002986 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	88da      	ldrh	r2, [r3, #6]
 8002884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002886:	f004 ff7e 	bl	8007786 <USB_ReadPMA>
 800288a:	e07c      	b.n	8002986 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	78db      	ldrb	r3, [r3, #3]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d108      	bne.n	80028a6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002894:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002896:	461a      	mov	r2, r3
 8002898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f927 	bl	8002aee <HAL_PCD_EP_DB_Receive>
 80028a0:	4603      	mov	r3, r0
 80028a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028a4:	e06f      	b.n	8002986 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	441a      	add	r2, r3
 80028d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d021      	beq.n	8002944 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	3302      	adds	r3, #2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800292a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02a      	beq.n	8002986 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	6959      	ldr	r1, [r3, #20]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	891a      	ldrh	r2, [r3, #8]
 800293c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800293e:	f004 ff22 	bl	8007786 <USB_ReadPMA>
 8002942:	e020      	b.n	8002986 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	3306      	adds	r3, #6
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	4413      	add	r3, r2
 8002962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800296e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	895a      	ldrh	r2, [r3, #10]
 8002980:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002982:	f004 ff00 	bl	8007786 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800298c:	441a      	add	r2, r3
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002998:	441a      	add	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <PCD_EP_ISR_Handler+0x4c2>
 80029a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d206      	bcs.n	80029be <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f006 fc78 	bl	80092ac <HAL_PCD_DataOutStageCallback>
 80029bc:	e005      	b.n	80029ca <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 ff23 	bl	8005810 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d07e      	beq.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80029d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	843b      	strh	r3, [r7, #32]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	441a      	add	r2, r3
 8002a12:	8c3b      	ldrh	r3, [r7, #32]
 8002a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	78db      	ldrb	r3, [r3, #3]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d00c      	beq.n	8002a42 <PCD_EP_ISR_Handler+0x554>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d146      	bne.n	8002ac6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d141      	bne.n	8002ac6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	3302      	adds	r3, #2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	8bfb      	ldrh	r3, [r7, #30]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d906      	bls.n	8002a84 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	8bfb      	ldrh	r3, [r7, #30]
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	619a      	str	r2, [r3, #24]
 8002a82:	e002      	b.n	8002a8a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f006 fc22 	bl	80092e2 <HAL_PCD_DataInStageCallback>
 8002a9e:	e018      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	8bfb      	ldrh	r3, [r7, #30]
 8002aa6:	441a      	add	r2, r3
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	8bfb      	ldrh	r3, [r7, #30]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 fea6 	bl	8005810 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ac4:	e005      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f91b 	bl	8002d08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	b21b      	sxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f6ff ad0a 	blt.w	80024f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3738      	adds	r7, #56	; 0x38
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b088      	sub	sp, #32
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d07e      	beq.n	8002c04 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	8b7b      	ldrh	r3, [r7, #26]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d306      	bcc.n	8002b48 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
 8002b40:	1ad2      	subs	r2, r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	619a      	str	r2, [r3, #24]
 8002b46:	e002      	b.n	8002b4e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d123      	bne.n	8002b9e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	833b      	strh	r3, [r7, #24]
 8002b72:	8b3b      	ldrh	r3, [r7, #24]
 8002b74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b78:	833b      	strh	r3, [r7, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	8b3b      	ldrh	r3, [r7, #24]
 8002b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01f      	beq.n	8002be8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	82fb      	strh	r3, [r7, #22]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	8afb      	ldrh	r3, [r7, #22]
 8002bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6959      	ldr	r1, [r3, #20]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	891a      	ldrh	r2, [r3, #8]
 8002bfc:	8b7b      	ldrh	r3, [r7, #26]
 8002bfe:	f004 fdc2 	bl	8007786 <USB_ReadPMA>
 8002c02:	e07c      	b.n	8002cfe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	3306      	adds	r3, #6
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	8b7b      	ldrh	r3, [r7, #26]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d306      	bcc.n	8002c46 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	8b7b      	ldrh	r3, [r7, #26]
 8002c3e:	1ad2      	subs	r2, r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	619a      	str	r2, [r3, #24]
 8002c44:	e002      	b.n	8002c4c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d123      	bne.n	8002c9c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	83fb      	strh	r3, [r7, #30]
 8002c70:	8bfb      	ldrh	r3, [r7, #30]
 8002c72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c76:	83fb      	strh	r3, [r7, #30]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	8bfb      	ldrh	r3, [r7, #30]
 8002c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11f      	bne.n	8002ce6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc0:	83bb      	strh	r3, [r7, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	441a      	add	r2, r3
 8002cd0:	8bbb      	ldrh	r3, [r7, #28]
 8002cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ce6:	8b7b      	ldrh	r3, [r7, #26]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6959      	ldr	r1, [r3, #20]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	895a      	ldrh	r2, [r3, #10]
 8002cf8:	8b7b      	ldrh	r3, [r7, #26]
 8002cfa:	f004 fd44 	bl	8007786 <USB_ReadPMA>
    }
  }

  return count;
 8002cfe:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b0a2      	sub	sp, #136	; 0x88
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 81c7 	beq.w	80030b0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	3302      	adds	r3, #2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d907      	bls.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	619a      	str	r2, [r3, #24]
 8002d68:	e002      	b.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 80b9 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d126      	bne.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	4413      	add	r3, r2
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	011a      	lsls	r2, r3, #4
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	4413      	add	r3, r2
 8002da4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	e01a      	b.n	8002e06 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d116      	bne.n	8002e06 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	4413      	add	r3, r2
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	011a      	lsls	r2, r3, #4
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	4413      	add	r3, r2
 8002dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2200      	movs	r2, #0
 8002e04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d126      	bne.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	011a      	lsls	r2, r3, #4
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e017      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d113      	bne.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	4413      	add	r3, r2
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	011a      	lsls	r2, r3, #4
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	4413      	add	r3, r2
 8002e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f006 fa22 	bl	80092e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 82d4 	beq.w	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	827b      	strh	r3, [r7, #18]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	8a7b      	ldrh	r3, [r7, #18]
 8002ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8013      	strh	r3, [r2, #0]
 8002eea:	e2b2      	b.n	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d021      	beq.n	8002f3a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 8286 	bne.w	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f4e:	441a      	add	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f5c:	441a      	add	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d309      	bcc.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	621a      	str	r2, [r3, #32]
 8002f80:	e015      	b.n	8002fae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f8e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f98:	e009      	b.n	8002fae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d155      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	4413      	add	r3, r2
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d112      	bne.n	800300a <HAL_PCD_EP_DB_Transmit+0x302>
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003002:	b29a      	uxth	r2, r3
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	e047      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x392>
 800300a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300c:	2b3e      	cmp	r3, #62	; 0x3e
 800300e:	d811      	bhi.n	8003034 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003022:	3301      	adds	r3, #1
 8003024:	64bb      	str	r3, [r7, #72]	; 0x48
 8003026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003028:	b29b      	uxth	r3, r3
 800302a:	029b      	lsls	r3, r3, #10
 800302c:	b29a      	uxth	r2, r3
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	e032      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x392>
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	64bb      	str	r3, [r7, #72]	; 0x48
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x342>
 8003044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003046:	3b01      	subs	r3, #1
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	b29b      	uxth	r3, r3
 800304e:	029b      	lsls	r3, r3, #10
 8003050:	b29b      	uxth	r3, r3
 8003052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305a:	b29a      	uxth	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e01b      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x392>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d117      	bne.n	800309a <HAL_PCD_EP_DB_Transmit+0x392>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	4413      	add	r3, r2
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	011a      	lsls	r2, r3, #4
 8003088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308a:	4413      	add	r3, r2
 800308c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	b29a      	uxth	r2, r3
 8003096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003098:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6959      	ldr	r1, [r3, #20]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	891a      	ldrh	r2, [r3, #8]
 80030a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f004 fb27 	bl	80076fc <USB_WritePMA>
 80030ae:	e1d0      	b.n	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	3306      	adds	r3, #6
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d307      	bcc.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030f0:	1ad2      	subs	r2, r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	619a      	str	r2, [r3, #24]
 80030f6:	e002      	b.n	80030fe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 80c4 	bne.w	8003290 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d126      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x456>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	4413      	add	r3, r2
 8003126:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	011a      	lsls	r2, r3, #4
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	4413      	add	r3, r2
 8003132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003136:	66bb      	str	r3, [r7, #104]	; 0x68
 8003138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003142:	b29a      	uxth	r2, r3
 8003144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29a      	uxth	r2, r3
 8003158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e01a      	b.n	8003194 <HAL_PCD_EP_DB_Transmit+0x48c>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d116      	bne.n	8003194 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	677b      	str	r3, [r7, #116]	; 0x74
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317a:	4413      	add	r3, r2
 800317c:	677b      	str	r3, [r7, #116]	; 0x74
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	011a      	lsls	r2, r3, #4
 8003184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003186:	4413      	add	r3, r2
 8003188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800318c:	673b      	str	r3, [r7, #112]	; 0x70
 800318e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	67bb      	str	r3, [r7, #120]	; 0x78
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d12f      	bne.n	8003202 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ba:	4413      	add	r3, r2
 80031bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	011a      	lsls	r2, r3, #4
 80031c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ca:	4413      	add	r3, r2
 80031cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e017      	b.n	8003232 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d113      	bne.n	8003232 <HAL_PCD_EP_DB_Transmit+0x52a>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003218:	4413      	add	r3, r2
 800321a:	67bb      	str	r3, [r7, #120]	; 0x78
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	011a      	lsls	r2, r3, #4
 8003222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003224:	4413      	add	r3, r2
 8003226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800322a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800322c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800322e:	2200      	movs	r2, #0
 8003230:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f006 f852 	bl	80092e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 8104 	bne.w	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800327a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
 800328e:	e0e0      	b.n	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d121      	bne.n	80032de <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 80b4 	bne.w	8003452 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f2:	441a      	add	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003300:	441a      	add	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	429a      	cmp	r2, r3
 8003310:	d309      	bcc.n	8003326 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331e:	1ad2      	subs	r2, r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	621a      	str	r2, [r3, #32]
 8003324:	e015      	b.n	8003352 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800332e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003332:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800333c:	e009      	b.n	8003352 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	667b      	str	r3, [r7, #100]	; 0x64
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	785b      	ldrb	r3, [r3, #1]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d155      	bne.n	800340c <HAL_PCD_EP_DB_Transmit+0x704>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	4413      	add	r3, r2
 8003376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	011a      	lsls	r2, r3, #4
 800337e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003380:	4413      	add	r3, r2
 8003382:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003386:	65bb      	str	r3, [r7, #88]	; 0x58
 8003388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338a:	2b00      	cmp	r3, #0
 800338c:	d112      	bne.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800338e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003398:	b29a      	uxth	r2, r3
 800339a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	e044      	b.n	800343e <HAL_PCD_EP_DB_Transmit+0x736>
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	2b3e      	cmp	r3, #62	; 0x3e
 80033b8:	d811      	bhi.n	80033de <HAL_PCD_EP_DB_Transmit+0x6d6>
 80033ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	657b      	str	r3, [r7, #84]	; 0x54
 80033c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80033ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033cc:	3301      	adds	r3, #1
 80033ce:	657b      	str	r3, [r7, #84]	; 0x54
 80033d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	e02f      	b.n	800343e <HAL_PCD_EP_DB_Transmit+0x736>
 80033de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	657b      	str	r3, [r7, #84]	; 0x54
 80033e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80033ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f0:	3b01      	subs	r3, #1
 80033f2:	657b      	str	r3, [r7, #84]	; 0x54
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003404:	b29a      	uxth	r2, r3
 8003406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	e018      	b.n	800343e <HAL_PCD_EP_DB_Transmit+0x736>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d114      	bne.n	800343e <HAL_PCD_EP_DB_Transmit+0x736>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003422:	4413      	add	r3, r2
 8003424:	667b      	str	r3, [r7, #100]	; 0x64
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	011a      	lsls	r2, r3, #4
 800342c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342e:	4413      	add	r3, r2
 8003430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003434:	663b      	str	r3, [r7, #96]	; 0x60
 8003436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003438:	b29a      	uxth	r2, r3
 800343a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6959      	ldr	r1, [r3, #20]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	895a      	ldrh	r2, [r3, #10]
 800344a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344c:	b29b      	uxth	r3, r3
 800344e:	f004 f955 	bl	80076fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800346c:	823b      	strh	r3, [r7, #16]
 800346e:	8a3b      	ldrh	r3, [r7, #16]
 8003470:	f083 0310 	eor.w	r3, r3, #16
 8003474:	823b      	strh	r3, [r7, #16]
 8003476:	8a3b      	ldrh	r3, [r7, #16]
 8003478:	f083 0320 	eor.w	r3, r3, #32
 800347c:	823b      	strh	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8a3b      	ldrh	r3, [r7, #16]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3788      	adds	r7, #136	; 0x88
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	817b      	strh	r3, [r7, #10]
 80034ba:	4613      	mov	r3, r2
 80034bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e009      	b.n	80034f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034e2:	897a      	ldrh	r2, [r7, #10]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034f6:	893b      	ldrh	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	b29a      	uxth	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	80da      	strh	r2, [r3, #6]
 800350a:	e00b      	b.n	8003524 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2201      	movs	r2, #1
 8003510:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	b29a      	uxth	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	b29a      	uxth	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e272      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355c:	4b8f      	ldr	r3, [pc, #572]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
 8003568:	4b8c      	ldr	r3, [pc, #560]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x12c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e24c      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x76>
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7f      	ldr	r2, [pc, #508]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b7b      	ldr	r3, [pc, #492]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7a      	ldr	r2, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b78      	ldr	r3, [pc, #480]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a77      	ldr	r2, [pc, #476]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xbc>
 80035d2:	4b72      	ldr	r3, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a71      	ldr	r2, [pc, #452]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6a      	ldr	r2, [pc, #424]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a67      	ldr	r2, [pc, #412]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fd7a 	bl	8001104 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fd76 	bl	8001104 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e200      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5d      	ldr	r3, [pc, #372]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe4>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fd66 	bl	8001104 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fd62 	bl	8001104 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1ec      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x10c>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c0      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4939      	ldr	r1, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd fd1b 	bl	8001104 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fd fd17 	bl	8001104 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1a1      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4927      	ldr	r1, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd fcfa 	bl	8001104 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd fcf6 	bl	8001104 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e180      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03a      	beq.n	80037b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d019      	beq.n	800377a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fd fcda 	bl	8001104 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd fcd6 	bl	8001104 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e160      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003772:	2001      	movs	r0, #1
 8003774:	f000 faa6 	bl	8003cc4 <RCC_Delay>
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003780:	f7fd fcc0 	bl	8001104 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003786:	e00f      	b.n	80037a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fd fcbc 	bl	8001104 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d908      	bls.n	80037a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e146      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	42420000 	.word	0x42420000
 80037a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b92      	ldr	r3, [pc, #584]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e9      	bne.n	8003788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a6 	beq.w	800390e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4a87      	ldr	r2, [pc, #540]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	61d3      	str	r3, [r2, #28]
 80037de:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fd fc7d 	bl	8001104 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd fc79 	bl	8001104 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e103      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x4c8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x312>
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e02d      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x334>
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6213      	str	r3, [r2, #32]
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x356>
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4a60      	ldr	r2, [pc, #384]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6213      	str	r3, [r2, #32]
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	4b58      	ldr	r3, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7fd fc2d 	bl	8001104 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fd fc29 	bl	8001104 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0b1      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x37e>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fd fc17 	bl	8001104 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd fc13 	bl	8001104 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e09b      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8087 	beq.w	8003a26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d061      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d146      	bne.n	80039ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCC_OscConfig+0x4cc>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd fbe7 	bl	8001104 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fbe3 	bl	8001104 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e06d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394c:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d108      	bne.n	8003974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4921      	ldr	r1, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a19      	ldr	r1, [r3, #32]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	430b      	orrs	r3, r1
 8003986:	491b      	ldr	r1, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x4cc>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fd fbb7 	bl	8001104 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fd fbb3 	bl	8001104 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x46a>
 80039b8:	e035      	b.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd fba0 	bl	8001104 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fb9c 	bl	8001104 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e026      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x498>
 80039e6:	e01e      	b.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e019      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x500>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0d0      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	4965      	ldr	r1, [pc, #404]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ab2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d040      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e073      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4936      	ldr	r1, [pc, #216]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fd faee 	bl	8001104 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd faea 	bl	8001104 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e053      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d210      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0207 	bic.w	r2, r3, #7
 8003b6a:	4922      	ldr	r1, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f821 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1cc>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1d0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fa4c 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08009860 	.word	0x08009860
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b490      	push	{r4, r7}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c10:	1d3c      	adds	r4, r7, #4
 8003c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c18:	f240 2301 	movw	r3, #513	; 0x201
 8003c1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x40>
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x46>
 8003c46:	e02b      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c4a:	623b      	str	r3, [r7, #32]
      break;
 8003c4c:	e02b      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3328      	adds	r3, #40	; 0x28
 8003c58:	443b      	add	r3, r7
 8003c5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c5e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0c5b      	lsrs	r3, r3, #17
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	3328      	adds	r3, #40	; 0x28
 8003c76:	443b      	add	r3, r7
 8003c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c82:	fb03 f202 	mul.w	r2, r3, r2
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	e004      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	623b      	str	r3, [r7, #32]
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ca2:	623b      	str	r3, [r7, #32]
      break;
 8003ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc90      	pop	{r4, r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	08009808 	.word	0x08009808
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	007a1200 	.word	0x007a1200
 8003cc0:	003d0900 	.word	0x003d0900

08003cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <RCC_Delay+0x34>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <RCC_Delay+0x38>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0a5b      	lsrs	r3, r3, #9
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ce0:	bf00      	nop
  }
  while (Delay --);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	60fa      	str	r2, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f9      	bne.n	8003ce0 <RCC_Delay+0x1c>
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d07d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10d      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4a4b      	ldr	r2, [pc, #300]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d36:	61d3      	str	r3, [r2, #28]
 8003d38:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d118      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d54:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a42      	ldr	r2, [pc, #264]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d60:	f7fd f9d0 	bl	8001104 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	e008      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d68:	f7fd f9cc 	bl	8001104 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e06d      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d86:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d02e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d027      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da4:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dae:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d014      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd f99b 	bl	8001104 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fd f997 	bl	8001104 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e036      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4917      	ldr	r1, [pc, #92]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	490b      	ldr	r1, [pc, #44]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4904      	ldr	r1, [pc, #16]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
 8003e68:	42420440 	.word	0x42420440

08003e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e041      	b.n	8003f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc fe44 	bl	8000b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 fc30 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_TIM_PWM_Start_DMA+0x28>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e022      	b.n	8003f7a <HAL_TIM_PWM_Start_DMA+0x6e>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d109      	bne.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x42>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e015      	b.n	8003f7a <HAL_TIM_PWM_Start_DMA+0x6e>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e008      	b.n	8003f7a <HAL_TIM_PWM_Start_DMA+0x6e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e14e      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_TIM_PWM_Start_DMA+0x90>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e022      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d109      	bne.n	8003fb6 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e015      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d109      	bne.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d024      	beq.n	8004030 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0xea>
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e114      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004004:	e016      	b.n	8004034 <HAL_TIM_PWM_Start_DMA+0x128>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start_DMA+0x10a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004014:	e00e      	b.n	8004034 <HAL_TIM_PWM_Start_DMA+0x128>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Start_DMA+0x11a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004024:	e006      	b.n	8004034 <HAL_TIM_PWM_Start_DMA+0x128>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800402e:	e001      	b.n	8004034 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0f5      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	f200 80ae 	bhi.w	8004198 <HAL_TIM_PWM_Start_DMA+0x28c>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_TIM_PWM_Start_DMA+0x138>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004079 	.word	0x08004079
 8004048:	08004199 	.word	0x08004199
 800404c:	08004199 	.word	0x08004199
 8004050:	08004199 	.word	0x08004199
 8004054:	080040c1 	.word	0x080040c1
 8004058:	08004199 	.word	0x08004199
 800405c:	08004199 	.word	0x08004199
 8004060:	08004199 	.word	0x08004199
 8004064:	08004109 	.word	0x08004109
 8004068:	08004199 	.word	0x08004199
 800406c:	08004199 	.word	0x08004199
 8004070:	08004199 	.word	0x08004199
 8004074:	08004151 	.word	0x08004151
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	4a6a      	ldr	r2, [pc, #424]	; (8004228 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800407e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	4a69      	ldr	r2, [pc, #420]	; (800422c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	4a68      	ldr	r2, [pc, #416]	; (8004230 <HAL_TIM_PWM_Start_DMA+0x324>)
 800408e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3334      	adds	r3, #52	; 0x34
 800409c:	461a      	mov	r2, r3
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	f7fd f9c6 	bl	8001430 <HAL_DMA_Start_IT>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0b8      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040bc:	60da      	str	r2, [r3, #12]
      break;
 80040be:	e06c      	b.n	800419a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	4a57      	ldr	r2, [pc, #348]	; (800422c <HAL_TIM_PWM_Start_DMA+0x320>)
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	4a56      	ldr	r2, [pc, #344]	; (8004230 <HAL_TIM_PWM_Start_DMA+0x324>)
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3338      	adds	r3, #56	; 0x38
 80040e4:	461a      	mov	r2, r3
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	f7fd f9a2 	bl	8001430 <HAL_DMA_Start_IT>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e094      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004104:	60da      	str	r2, [r3, #12]
      break;
 8004106:	e048      	b.n	800419a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a46      	ldr	r2, [pc, #280]	; (8004228 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a45      	ldr	r2, [pc, #276]	; (800422c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	4a44      	ldr	r2, [pc, #272]	; (8004230 <HAL_TIM_PWM_Start_DMA+0x324>)
 800411e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	333c      	adds	r3, #60	; 0x3c
 800412c:	461a      	mov	r2, r3
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	f7fd f97e 	bl	8001430 <HAL_DMA_Start_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e070      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414c:	60da      	str	r2, [r3, #12]
      break;
 800414e:	e024      	b.n	800419a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_TIM_PWM_Start_DMA+0x320>)
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	4a32      	ldr	r2, [pc, #200]	; (8004230 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004166:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3340      	adds	r3, #64	; 0x40
 8004174:	461a      	mov	r2, r3
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	f7fd f95a 	bl	8001430 <HAL_DMA_Start_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e04c      	b.n	8004220 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004194:	60da      	str	r2, [r3, #12]
      break;
 8004196:	e000      	b.n	800419a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004198:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2201      	movs	r2, #1
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fc9e 	bl	8004ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a21      	ldr	r2, [pc, #132]	; (8004234 <HAL_TIM_PWM_Start_DMA+0x328>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d107      	bne.n	80041c2 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_TIM_PWM_Start_DMA+0x328>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIM_PWM_Start_DMA+0x2de>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_PWM_Start_DMA+0x2de>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a17      	ldr	r2, [pc, #92]	; (8004238 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIM_PWM_Start_DMA+0x2de>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <HAL_TIM_PWM_Start_DMA+0x330>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d010      	beq.n	800421e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	e007      	b.n	800421e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	08004601 	.word	0x08004601
 800422c:	080046a9 	.word	0x080046a9
 8004230:	0800456f 	.word	0x0800456f
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800

08004240 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d855      	bhi.n	80042fc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800428d 	.word	0x0800428d
 800425c:	080042fd 	.word	0x080042fd
 8004260:	080042fd 	.word	0x080042fd
 8004264:	080042fd 	.word	0x080042fd
 8004268:	080042a9 	.word	0x080042a9
 800426c:	080042fd 	.word	0x080042fd
 8004270:	080042fd 	.word	0x080042fd
 8004274:	080042fd 	.word	0x080042fd
 8004278:	080042c5 	.word	0x080042c5
 800427c:	080042fd 	.word	0x080042fd
 8004280:	080042fd 	.word	0x080042fd
 8004284:	080042fd 	.word	0x080042fd
 8004288:	080042e1 	.word	0x080042e1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800429a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd f925 	bl	80014f0 <HAL_DMA_Abort_IT>
      break;
 80042a6:	e02a      	b.n	80042fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fd f917 	bl	80014f0 <HAL_DMA_Abort_IT>
      break;
 80042c2:	e01c      	b.n	80042fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fd f909 	bl	80014f0 <HAL_DMA_Abort_IT>
      break;
 80042de:	e00e      	b.n	80042fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd f8fb 	bl	80014f0 <HAL_DMA_Abort_IT>
      break;
 80042fa:	e000      	b.n	80042fe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80042fc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fbec 	bl	8004ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d117      	bne.n	8004346 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	f240 4344 	movw	r3, #1092	; 0x444
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d107      	bne.n	8004346 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <HAL_TIM_PWM_Stop_DMA+0x136>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	f240 4344 	movw	r3, #1092	; 0x444
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_TIM_PWM_Stop_DMA+0x136>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Stop_DMA+0x146>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004384:	e013      	b.n	80043ae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b04      	cmp	r3, #4
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Stop_DMA+0x156>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004394:	e00b      	b.n	80043ae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_PWM_Stop_DMA+0x166>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	e003      	b.n	80043ae <HAL_TIM_PWM_Stop_DMA+0x16e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40012c00 	.word	0x40012c00

080043bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0ac      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x174>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f200 809f 	bhi.w	8004524 <HAL_TIM_PWM_ConfigChannel+0x168>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004525 	.word	0x08004525
 80043f4:	08004525 	.word	0x08004525
 80043f8:	08004525 	.word	0x08004525
 80043fc:	08004461 	.word	0x08004461
 8004400:	08004525 	.word	0x08004525
 8004404:	08004525 	.word	0x08004525
 8004408:	08004525 	.word	0x08004525
 800440c:	080044a3 	.word	0x080044a3
 8004410:	08004525 	.word	0x08004525
 8004414:	08004525 	.word	0x08004525
 8004418:	08004525 	.word	0x08004525
 800441c:	080044e3 	.word	0x080044e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f9d4 	bl	80047d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
      break;
 800445e:	e062      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa1a 	bl	80048a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]
      break;
 80044a0:	e041      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fa63 	bl	8004974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0204 	bic.w	r2, r2, #4
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	61da      	str	r2, [r3, #28]
      break;
 80044e0:	e021      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 faad 	bl	8004a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]
      break;
 8004522:	e000      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004524:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d107      	bne.n	8004596 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	e02a      	b.n	80045ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2202      	movs	r2, #2
 80045a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ae:	e01d      	b.n	80045ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d107      	bne.n	80045ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2204      	movs	r2, #4
 80045be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	e010      	b.n	80045ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d107      	bne.n	80045e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2208      	movs	r2, #8
 80045d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e2:	e003      	b.n	80045ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff ffb5 	bl	800455c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d10b      	bne.n	8004630 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d136      	bne.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462e:	e031      	b.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d10b      	bne.n	8004652 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2202      	movs	r2, #2
 800463e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d125      	bne.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004650:	e020      	b.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	d10b      	bne.n	8004674 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2204      	movs	r2, #4
 8004660:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d114      	bne.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004672:	e00f      	b.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d10a      	bne.n	8004694 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2208      	movs	r2, #8
 8004682:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff ff4f 	bl	8004538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d103      	bne.n	80046c8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	771a      	strb	r2, [r3, #28]
 80046c6:	e019      	b.n	80046fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d103      	bne.n	80046da <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2202      	movs	r2, #2
 80046d6:	771a      	strb	r2, [r3, #28]
 80046d8:	e010      	b.n	80046fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d103      	bne.n	80046ec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2204      	movs	r2, #4
 80046e8:	771a      	strb	r2, [r3, #28]
 80046ea:	e007      	b.n	80046fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d102      	bne.n	80046fc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2208      	movs	r2, #8
 80046fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ff24 	bl	800454a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_Base_SetConfig+0xb8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0x30>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0x30>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a26      	ldr	r2, [pc, #152]	; (80047cc <TIM_Base_SetConfig+0xbc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0x30>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM_Base_SetConfig+0xc0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <TIM_Base_SetConfig+0xb8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00b      	beq.n	8004772 <TIM_Base_SetConfig+0x62>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d007      	beq.n	8004772 <TIM_Base_SetConfig+0x62>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a19      	ldr	r2, [pc, #100]	; (80047cc <TIM_Base_SetConfig+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <TIM_Base_SetConfig+0x62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <TIM_Base_SetConfig+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <TIM_Base_SetConfig+0xb8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d103      	bne.n	80047b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	615a      	str	r2, [r3, #20]
}
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800

080047d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0302 	bic.w	r3, r3, #2
 800481c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1c      	ldr	r2, [pc, #112]	; (800489c <TIM_OC1_SetConfig+0xc8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10c      	bne.n	800484a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0308 	bic.w	r3, r3, #8
 8004836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a13      	ldr	r2, [pc, #76]	; (800489c <TIM_OC1_SetConfig+0xc8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d111      	bne.n	8004876 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00

080048a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0210 	bic.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0320 	bic.w	r3, r3, #32
 80048ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <TIM_OC2_SetConfig+0xd0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10d      	bne.n	800491c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a14      	ldr	r2, [pc, #80]	; (8004970 <TIM_OC2_SetConfig+0xd0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d113      	bne.n	800494c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800492a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00

08004974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <TIM_OC3_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10d      	bne.n	80049ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <TIM_OC3_SetConfig+0xd0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d113      	bne.n	8004a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00

08004a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <TIM_OC4_SetConfig+0x98>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d109      	bne.n	8004abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00

08004ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2201      	movs	r2, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1a      	ldr	r2, [r3, #32]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	401a      	ands	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e046      	b.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800

08004be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e03d      	b.n	8004c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	f107 0014 	add.w	r0, r7, #20
 8004c98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	b004      	add	sp, #16
 8004ca8:	4770      	bx	lr

08004caa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cba:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cde:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ce2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d22:	b084      	sub	sp, #16
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	f107 0014 	add.w	r0, r7, #20
 8004d30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	b004      	add	sp, #16
 8004d60:	4770      	bx	lr
	...

08004d64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b09b      	sub	sp, #108	; 0x6c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	78db      	ldrb	r3, [r3, #3]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d81f      	bhi.n	8004dd6 <USB_ActivateEndpoint+0x72>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <USB_ActivateEndpoint+0x38>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004ddf 	.word	0x08004ddf
 8004da8:	08004dbb 	.word	0x08004dbb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004db4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004db8:	e012      	b.n	8004de0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dbe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004dc2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004dc6:	e00b      	b.n	8004de0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004dc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004dd4:	e004      	b.n	8004de0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004ddc:	e000      	b.n	8004de0 <USB_ActivateEndpoint+0x7c>
      break;
 8004dde:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	7b1b      	ldrb	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 8149 	bne.w	80050e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8084 	beq.w	8004f64 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	88db      	ldrh	r3, [r3, #6]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	81fb      	strh	r3, [r7, #14]
 8004e9e:	89fb      	ldrh	r3, [r7, #14]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01b      	beq.n	8004ee0 <USB_ActivateEndpoint+0x17c>
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	81bb      	strh	r3, [r7, #12]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	89bb      	ldrh	r3, [r7, #12]
 8004ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	78db      	ldrb	r3, [r3, #3]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d020      	beq.n	8004f2a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efe:	813b      	strh	r3, [r7, #8]
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	f083 0320 	eor.w	r3, r3, #32
 8004f06:	813b      	strh	r3, [r7, #8]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	893b      	ldrh	r3, [r7, #8]
 8004f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	8013      	strh	r3, [r2, #0]
 8004f28:	e27f      	b.n	800542a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f40:	817b      	strh	r3, [r7, #10]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	897b      	ldrh	r3, [r7, #10]
 8004f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	8013      	strh	r3, [r2, #0]
 8004f62:	e262      	b.n	800542a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	4413      	add	r3, r2
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	88db      	ldrh	r3, [r3, #6]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	4413      	add	r3, r2
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	011a      	lsls	r2, r3, #4
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fba:	623b      	str	r3, [r7, #32]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d112      	bne.n	8004fea <USB_ActivateEndpoint+0x286>
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	e02f      	b.n	800504a <USB_ActivateEndpoint+0x2e6>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff0:	d813      	bhi.n	800501a <USB_ActivateEndpoint+0x2b6>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <USB_ActivateEndpoint+0x2a8>
 8005006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005008:	3301      	adds	r3, #1
 800500a:	663b      	str	r3, [r7, #96]	; 0x60
 800500c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29a      	uxth	r2, r3
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	e017      	b.n	800504a <USB_ActivateEndpoint+0x2e6>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	663b      	str	r3, [r7, #96]	; 0x60
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <USB_ActivateEndpoint+0x2d0>
 800502e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005030:	3b01      	subs	r3, #1
 8005032:	663b      	str	r3, [r7, #96]	; 0x60
 8005034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005036:	b29b      	uxth	r3, r3
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	b29b      	uxth	r3, r3
 800503c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005044:	b29a      	uxth	r2, r3
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	83fb      	strh	r3, [r7, #30]
 8005058:	8bfb      	ldrh	r3, [r7, #30]
 800505a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01b      	beq.n	800509a <USB_ActivateEndpoint+0x336>
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	83bb      	strh	r3, [r7, #28]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8bbb      	ldrh	r3, [r7, #28]
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	837b      	strh	r3, [r7, #26]
 80050b2:	8b7b      	ldrh	r3, [r7, #26]
 80050b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050b8:	837b      	strh	r3, [r7, #26]
 80050ba:	8b7b      	ldrh	r3, [r7, #26]
 80050bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050c0:	837b      	strh	r3, [r7, #26]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	8b7b      	ldrh	r3, [r7, #26]
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]
 80050e2:	e1a2      	b.n	800542a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	65bb      	str	r3, [r7, #88]	; 0x58
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005130:	4413      	add	r3, r2
 8005132:	65bb      	str	r3, [r7, #88]	; 0x58
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	011a      	lsls	r2, r3, #4
 800513a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800513c:	4413      	add	r3, r2
 800513e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005142:	657b      	str	r3, [r7, #84]	; 0x54
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	891b      	ldrh	r3, [r3, #8]
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	b29b      	uxth	r3, r3
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	653b      	str	r3, [r7, #80]	; 0x50
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005164:	4413      	add	r3, r2
 8005166:	653b      	str	r3, [r7, #80]	; 0x50
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	011a      	lsls	r2, r3, #4
 800516e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005170:	4413      	add	r3, r2
 8005172:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	895b      	ldrh	r3, [r3, #10]
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	b29b      	uxth	r3, r3
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8091 	bne.w	80052b4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01b      	beq.n	80051e2 <USB_ActivateEndpoint+0x47e>
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80051f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01b      	beq.n	8005232 <USB_ActivateEndpoint+0x4ce>
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	86bb      	strh	r3, [r7, #52]	; 0x34
 800524a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800524c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005250:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005252:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005254:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005258:	86bb      	strh	r3, [r7, #52]	; 0x34
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005290:	867b      	strh	r3, [r7, #50]	; 0x32
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]
 80052b2:	e0ba      	b.n	800542a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01d      	beq.n	800530c <USB_ActivateEndpoint+0x5a8>
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800531c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01d      	beq.n	8005364 <USB_ActivateEndpoint+0x600>
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	441a      	add	r2, r3
 800534c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	78db      	ldrb	r3, [r3, #3]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d024      	beq.n	80053b6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005382:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005386:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800538a:	f083 0320 	eor.w	r3, r3, #32
 800538e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
 80053b4:	e01d      	b.n	80053f2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800542a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800542e:	4618      	mov	r0, r3
 8005430:	376c      	adds	r7, #108	; 0x6c
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005438:	b480      	push	{r7}
 800543a:	b08d      	sub	sp, #52	; 0x34
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	7b1b      	ldrb	r3, [r3, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 808e 	bne.w	8005568 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d044      	beq.n	80054de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	81bb      	strh	r3, [r7, #12]
 8005462:	89bb      	ldrh	r3, [r7, #12]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01b      	beq.n	80054a4 <USB_DeactivateEndpoint+0x6c>
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	817b      	strh	r3, [r7, #10]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ba:	813b      	strh	r3, [r7, #8]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	893b      	ldrh	r3, [r7, #8]
 80054c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]
 80054dc:	e192      	b.n	8005804 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	827b      	strh	r3, [r7, #18]
 80054ec:	8a7b      	ldrh	r3, [r7, #18]
 80054ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01b      	beq.n	800552e <USB_DeactivateEndpoint+0xf6>
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550c:	823b      	strh	r3, [r7, #16]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	441a      	add	r2, r3
 8005518:	8a3b      	ldrh	r3, [r7, #16]
 800551a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	81fb      	strh	r3, [r7, #14]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]
 8005566:	e14d      	b.n	8005804 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 80a5 	bne.w	80056bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	843b      	strh	r3, [r7, #32]
 8005580:	8c3b      	ldrh	r3, [r7, #32]
 8005582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01b      	beq.n	80055c2 <USB_DeactivateEndpoint+0x18a>
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	83fb      	strh	r3, [r7, #30]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	8bfb      	ldrh	r3, [r7, #30]
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	83bb      	strh	r3, [r7, #28]
 80055d0:	8bbb      	ldrh	r3, [r7, #28]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01b      	beq.n	8005612 <USB_DeactivateEndpoint+0x1da>
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f0:	837b      	strh	r3, [r7, #26]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8b7b      	ldrh	r3, [r7, #26]
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	833b      	strh	r3, [r7, #24]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	441a      	add	r2, r3
 8005634:	8b3b      	ldrh	r3, [r7, #24]
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800565c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005660:	82fb      	strh	r3, [r7, #22]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	441a      	add	r2, r3
 800566c:	8afb      	ldrh	r3, [r7, #22]
 800566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	b29b      	uxth	r3, r3
 8005680:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005698:	82bb      	strh	r3, [r7, #20]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	441a      	add	r2, r3
 80056a4:	8abb      	ldrh	r3, [r7, #20]
 80056a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	8013      	strh	r3, [r2, #0]
 80056ba:	e0a3      	b.n	8005804 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01b      	beq.n	800570c <USB_DeactivateEndpoint+0x2d4>
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80056f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	857b      	strh	r3, [r7, #42]	; 0x2a
 800571a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01b      	beq.n	800575c <USB_DeactivateEndpoint+0x324>
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	853b      	strh	r3, [r7, #40]	; 0x28
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800578c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	441a      	add	r2, r3
 80057ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3734      	adds	r7, #52	; 0x34
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b0cc      	sub	sp, #304	; 0x130
 8005814:	af00      	add	r7, sp, #0
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800581e:	6018      	str	r0, [r3, #0]
 8005820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005828:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b01      	cmp	r3, #1
 8005838:	f041 817d 	bne.w	8006b36 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800583c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	429a      	cmp	r2, r3
 8005856:	d908      	bls.n	800586a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005868:	e007      	b.n	800587a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	7b1b      	ldrb	r3, [r3, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d152      	bne.n	8005930 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6959      	ldr	r1, [r3, #20]
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	88da      	ldrh	r2, [r3, #6]
 80058a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058b0:	6800      	ldr	r0, [r0, #0]
 80058b2:	f001 ff23 	bl	80076fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80058be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4619      	mov	r1, r3
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80058e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058e8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	440a      	add	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	011a      	lsls	r2, r3, #4
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4413      	add	r3, r2
 800590c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591e:	b29a      	uxth	r2, r3
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	f001 b8b5 	b.w	8006a9a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	78db      	ldrb	r3, [r3, #3]
 800593c:	2b02      	cmp	r3, #2
 800593e:	f040 84c6 	bne.w	80062ce <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a1a      	ldr	r2, [r3, #32]
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	f240 8443 	bls.w	80061e6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059cc:	1ad2      	subs	r2, r2, r3
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 823e 	beq.w	8005e7e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 809a 	bne.w	8005b5c <USB_EPStartXfer+0x34c>
 8005a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a5a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	440a      	add	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d122      	bne.n	8005ada <USB_EPStartXfer+0x2ca>
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e079      	b.n	8005bce <USB_EPStartXfer+0x3be>
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae0:	d81b      	bhi.n	8005b1a <USB_EPStartXfer+0x30a>
 8005ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <USB_EPStartXfer+0x2f2>
 8005af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005afc:	3301      	adds	r3, #1
 8005afe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e059      	b.n	8005bce <USB_EPStartXfer+0x3be>
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <USB_EPStartXfer+0x32a>
 8005b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b34:	3b01      	subs	r3, #1
 8005b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e038      	b.n	8005bce <USB_EPStartXfer+0x3be>
 8005b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d130      	bne.n	8005bce <USB_EPStartXfer+0x3be>
 8005b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b8a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	440a      	add	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	011a      	lsls	r2, r3, #4
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4413      	add	r3, r2
 8005bae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	895b      	ldrh	r3, [r3, #10]
 8005bda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6959      	ldr	r1, [r3, #20]
 8005bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bf4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bf8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bfc:	6800      	ldr	r0, [r0, #0]
 8005bfe:	f001 fd7d 	bl	80076fc <USB_WritePMA>
            ep->xfer_buff += len;
 8005c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c12:	441a      	add	r2, r3
 8005c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d90f      	bls.n	8005c5c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a1a      	ldr	r2, [r3, #32]
 8005c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	621a      	str	r2, [r3, #32]
 8005c5a:	e00e      	b.n	8005c7a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f040 809a 	bne.w	8005dc0 <USB_EPStartXfer+0x5b0>
 8005c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005cba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cbe:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	011a      	lsls	r2, r3, #4
 8005cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cda:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d122      	bne.n	8005d3e <USB_EPStartXfer+0x52e>
 8005cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e083      	b.n	8005e46 <USB_EPStartXfer+0x636>
 8005d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d42:	2b3e      	cmp	r3, #62	; 0x3e
 8005d44:	d81b      	bhi.n	8005d7e <USB_EPStartXfer+0x56e>
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <USB_EPStartXfer+0x556>
 8005d5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d60:	3301      	adds	r3, #1
 8005d62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d66:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	029b      	lsls	r3, r3, #10
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e063      	b.n	8005e46 <USB_EPStartXfer+0x636>
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <USB_EPStartXfer+0x58e>
 8005d94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e042      	b.n	8005e46 <USB_EPStartXfer+0x636>
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d13a      	bne.n	8005e46 <USB_EPStartXfer+0x636>
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ddc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	4619      	mov	r1, r3
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e02:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	440a      	add	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	011a      	lsls	r2, r3, #4
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	891b      	ldrh	r3, [r3, #8]
 8005e52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6959      	ldr	r1, [r3, #20]
 8005e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e74:	6800      	ldr	r0, [r0, #0]
 8005e76:	f001 fc41 	bl	80076fc <USB_WritePMA>
 8005e7a:	f000 be0e 	b.w	8006a9a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d16d      	bne.n	8005f6a <USB_EPStartXfer+0x75a>
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eae:	4413      	add	r3, r2
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	011a      	lsls	r2, r3, #4
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d112      	bne.n	8005ef8 <USB_EPStartXfer+0x6e8>
 8005ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e063      	b.n	8005fc0 <USB_EPStartXfer+0x7b0>
 8005ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efc:	2b3e      	cmp	r3, #62	; 0x3e
 8005efe:	d817      	bhi.n	8005f30 <USB_EPStartXfer+0x720>
 8005f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <USB_EPStartXfer+0x710>
 8005f16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	029b      	lsls	r3, r3, #10
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	e047      	b.n	8005fc0 <USB_EPStartXfer+0x7b0>
 8005f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <USB_EPStartXfer+0x740>
 8005f46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e02a      	b.n	8005fc0 <USB_EPStartXfer+0x7b0>
 8005f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d122      	bne.n	8005fc0 <USB_EPStartXfer+0x7b0>
 8005f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	653b      	str	r3, [r7, #80]	; 0x50
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9a:	4413      	add	r3, r2
 8005f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	011a      	lsls	r2, r3, #4
 8005fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	891b      	ldrh	r3, [r3, #8]
 8005fcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6959      	ldr	r1, [r3, #20]
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fe6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005fea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005fee:	6800      	ldr	r0, [r0, #0]
 8005ff0:	f001 fb84 	bl	80076fc <USB_WritePMA>
            ep->xfer_buff += len;
 8005ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006004:	441a      	add	r2, r3
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d90f      	bls.n	800604e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	621a      	str	r2, [r3, #32]
 800604c:	e00e      	b.n	800606c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800604e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2200      	movs	r2, #0
 800606a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800606c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	643b      	str	r3, [r7, #64]	; 0x40
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d16d      	bne.n	8006164 <USB_EPStartXfer+0x954>
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	4413      	add	r3, r2
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	011a      	lsls	r2, r3, #4
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	4413      	add	r3, r2
 80060be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d112      	bne.n	80060f2 <USB_EPStartXfer+0x8e2>
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e05d      	b.n	80061ae <USB_EPStartXfer+0x99e>
 80060f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f6:	2b3e      	cmp	r3, #62	; 0x3e
 80060f8:	d817      	bhi.n	800612a <USB_EPStartXfer+0x91a>
 80060fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <USB_EPStartXfer+0x90a>
 8006110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006114:	3301      	adds	r3, #1
 8006116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800611a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800611e:	b29b      	uxth	r3, r3
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	b29a      	uxth	r2, r3
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e041      	b.n	80061ae <USB_EPStartXfer+0x99e>
 800612a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <USB_EPStartXfer+0x93a>
 8006140:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006144:	3b01      	subs	r3, #1
 8006146:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800614a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29b      	uxth	r3, r3
 8006154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615c:	b29a      	uxth	r2, r3
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e024      	b.n	80061ae <USB_EPStartXfer+0x99e>
 8006164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d11c      	bne.n	80061ae <USB_EPStartXfer+0x99e>
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	4413      	add	r3, r2
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	011a      	lsls	r2, r3, #4
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	4413      	add	r3, r2
 800619e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	895b      	ldrh	r3, [r3, #10]
 80061ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6959      	ldr	r1, [r3, #20]
 80061ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f001 fa8d 	bl	80076fc <USB_WritePMA>
 80061e2:	f000 bc5a 	b.w	8006a9a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	441a      	add	r2, r3
 800623a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800623e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624e:	b29b      	uxth	r3, r3
 8006250:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006272:	4413      	add	r3, r2
 8006274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	011a      	lsls	r2, r3, #4
 8006284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006286:	4413      	add	r3, r2
 8006288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800628c:	65bb      	str	r3, [r7, #88]	; 0x58
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	b29a      	uxth	r2, r3
 8006294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006296:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	891b      	ldrh	r3, [r3, #8]
 80062a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6959      	ldr	r1, [r3, #20]
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062c6:	6800      	ldr	r0, [r0, #0]
 80062c8:	f001 fa18 	bl	80076fc <USB_WritePMA>
 80062cc:	e3e5      	b.n	8006a9a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80062ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 81bc 	beq.w	80066e8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800637e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d16d      	bne.n	800646a <USB_EPStartXfer+0xc5a>
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	67bb      	str	r3, [r7, #120]	; 0x78
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ae:	4413      	add	r3, r2
 80063b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c8:	677b      	str	r3, [r7, #116]	; 0x74
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d112      	bne.n	80063f8 <USB_EPStartXfer+0xbe8>
 80063d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	e060      	b.n	80064ba <USB_EPStartXfer+0xcaa>
 80063f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fc:	2b3e      	cmp	r3, #62	; 0x3e
 80063fe:	d817      	bhi.n	8006430 <USB_EPStartXfer+0xc20>
 8006400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <USB_EPStartXfer+0xc10>
 8006416:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800641a:	3301      	adds	r3, #1
 800641c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006420:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006424:	b29b      	uxth	r3, r3
 8006426:	029b      	lsls	r3, r3, #10
 8006428:	b29a      	uxth	r2, r3
 800642a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e044      	b.n	80064ba <USB_EPStartXfer+0xcaa>
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800643a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USB_EPStartXfer+0xc40>
 8006446:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800644a:	3b01      	subs	r3, #1
 800644c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006450:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006454:	b29b      	uxth	r3, r3
 8006456:	029b      	lsls	r3, r3, #10
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e027      	b.n	80064ba <USB_EPStartXfer+0xcaa>
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d11f      	bne.n	80064ba <USB_EPStartXfer+0xcaa>
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006490:	4413      	add	r3, r2
 8006492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80064ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	895b      	ldrh	r3, [r3, #10]
 80064c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6959      	ldr	r1, [r3, #20]
 80064d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064e8:	6800      	ldr	r0, [r0, #0]
 80064ea:	f001 f907 	bl	80076fc <USB_WritePMA>
          ep->xfer_buff += len;
 80064ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	441a      	add	r2, r3
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	429a      	cmp	r2, r3
 8006526:	d90f      	bls.n	8006548 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	621a      	str	r2, [r3, #32]
 8006546:	e00e      	b.n	8006566 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8295 	beq.w	8006a9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d16d      	bne.n	800665c <USB_EPStartXfer+0xe4c>
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	66bb      	str	r3, [r7, #104]	; 0x68
 800658c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a0:	4413      	add	r3, r2
 80065a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	011a      	lsls	r2, r3, #4
 80065b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b4:	4413      	add	r3, r2
 80065b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ba:	667b      	str	r3, [r7, #100]	; 0x64
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d112      	bne.n	80065ea <USB_EPStartXfer+0xdda>
 80065c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	e063      	b.n	80066b2 <USB_EPStartXfer+0xea2>
 80065ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ee:	2b3e      	cmp	r3, #62	; 0x3e
 80065f0:	d817      	bhi.n	8006622 <USB_EPStartXfer+0xe12>
 80065f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80065fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <USB_EPStartXfer+0xe02>
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	3301      	adds	r3, #1
 800660e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	b29b      	uxth	r3, r3
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	b29a      	uxth	r2, r3
 800661c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e047      	b.n	80066b2 <USB_EPStartXfer+0xea2>
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800662c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <USB_EPStartXfer+0xe32>
 8006638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663c:	3b01      	subs	r3, #1
 800663e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29b      	uxth	r3, r3
 800664c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006654:	b29a      	uxth	r2, r3
 8006656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	e02a      	b.n	80066b2 <USB_EPStartXfer+0xea2>
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d122      	bne.n	80066b2 <USB_EPStartXfer+0xea2>
 800666c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	673b      	str	r3, [r7, #112]	; 0x70
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668c:	4413      	add	r3, r2
 800668e:	673b      	str	r3, [r7, #112]	; 0x70
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	011a      	lsls	r2, r3, #4
 800669e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	891b      	ldrh	r3, [r3, #8]
 80066be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f001 f80b 	bl	80076fc <USB_WritePMA>
 80066e6:	e1d8      	b.n	8006a9a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d178      	bne.n	80067ea <USB_EPStartXfer+0xfda>
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006714:	b29b      	uxth	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800671c:	4413      	add	r3, r2
 800671e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	011a      	lsls	r2, r3, #4
 8006730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006734:	4413      	add	r3, r2
 8006736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d116      	bne.n	8006774 <USB_EPStartXfer+0xf64>
 8006746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006752:	b29a      	uxth	r2, r3
 8006754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e06b      	b.n	800684c <USB_EPStartXfer+0x103c>
 8006774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006778:	2b3e      	cmp	r3, #62	; 0x3e
 800677a:	d818      	bhi.n	80067ae <USB_EPStartXfer+0xf9e>
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <USB_EPStartXfer+0xf8c>
 8006792:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006796:	3301      	adds	r3, #1
 8006798:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800679c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e04e      	b.n	800684c <USB_EPStartXfer+0x103c>
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <USB_EPStartXfer+0xfbe>
 80067c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067c8:	3b01      	subs	r3, #1
 80067ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	e030      	b.n	800684c <USB_EPStartXfer+0x103c>
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d128      	bne.n	800684c <USB_EPStartXfer+0x103c>
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006816:	b29b      	uxth	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800681e:	4413      	add	r3, r2
 8006820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006836:	4413      	add	r3, r2
 8006838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800683c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800684a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	891b      	ldrh	r3, [r3, #8]
 8006858:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6959      	ldr	r1, [r3, #20]
 8006868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686c:	b29b      	uxth	r3, r3
 800686e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006872:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006876:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	f000 ff3e 	bl	80076fc <USB_WritePMA>
          ep->xfer_buff += len;
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695a      	ldr	r2, [r3, #20]
 800688c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006890:	441a      	add	r2, r3
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d90f      	bls.n	80068da <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	621a      	str	r2, [r3, #32]
 80068d8:	e00e      	b.n	80068f8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80068ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2200      	movs	r2, #0
 80068f6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80068f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80cc 	beq.w	8006a9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d178      	bne.n	8006a12 <USB_EPStartXfer+0x1202>
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800692e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006944:	4413      	add	r3, r2
 8006946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	011a      	lsls	r2, r3, #4
 8006958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800695c:	4413      	add	r3, r2
 800695e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d116      	bne.n	800699c <USB_EPStartXfer+0x118c>
 800696e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800697a:	b29a      	uxth	r2, r3
 800697c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006980:	801a      	strh	r2, [r3, #0]
 8006982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	e064      	b.n	8006a66 <USB_EPStartXfer+0x1256>
 800699c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a0:	2b3e      	cmp	r3, #62	; 0x3e
 80069a2:	d818      	bhi.n	80069d6 <USB_EPStartXfer+0x11c6>
 80069a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <USB_EPStartXfer+0x11b4>
 80069ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069be:	3301      	adds	r3, #1
 80069c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	029b      	lsls	r3, r3, #10
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e047      	b.n	8006a66 <USB_EPStartXfer+0x1256>
 80069d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <USB_EPStartXfer+0x11e6>
 80069ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f0:	3b01      	subs	r3, #1
 80069f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	029b      	lsls	r3, r3, #10
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e029      	b.n	8006a66 <USB_EPStartXfer+0x1256>
 8006a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d121      	bne.n	8006a66 <USB_EPStartXfer+0x1256>
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a38:	4413      	add	r3, r2
 8006a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	011a      	lsls	r2, r3, #4
 8006a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a50:	4413      	add	r3, r2
 8006a52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	895b      	ldrh	r3, [r3, #10]
 8006a72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6959      	ldr	r1, [r3, #20]
 8006a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a94:	6800      	ldr	r0, [r0, #0]
 8006a96:	f000 fe31 	bl	80076fc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006abc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac8:	8013      	strh	r3, [r2, #0]
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ad2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ad6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ada:	8812      	ldrh	r2, [r2, #0]
 8006adc:	f082 0210 	eor.w	r2, r2, #16
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006aea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006af2:	8812      	ldrh	r2, [r2, #0]
 8006af4:	f082 0220 	eor.w	r2, r2, #32
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	f000 bc9f 	b.w	8007474 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	7b1b      	ldrb	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 80ae 	bne.w	8006ca4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d917      	bls.n	8006b94 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	619a      	str	r2, [r3, #24]
 8006b92:	e00e      	b.n	8006bb2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	011a      	lsls	r2, r3, #4
 8006bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bee:	4413      	add	r3, r2
 8006bf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d116      	bne.n	8006c2e <USB_EPStartXfer+0x141e>
 8006c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e3e8      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
 8006c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c32:	2b3e      	cmp	r3, #62	; 0x3e
 8006c34:	d818      	bhi.n	8006c68 <USB_EPStartXfer+0x1458>
 8006c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3a:	085b      	lsrs	r3, r3, #1
 8006c3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <USB_EPStartXfer+0x1446>
 8006c4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c50:	3301      	adds	r3, #1
 8006c52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	029b      	lsls	r3, r3, #10
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	e3cb      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <USB_EPStartXfer+0x1478>
 8006c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c82:	3b01      	subs	r3, #1
 8006c84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e3ad      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	78db      	ldrb	r3, [r3, #3]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	f040 8200 	bne.w	80070b6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 8091 	bne.w	8006dea <USB_EPStartXfer+0x15da>
 8006cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cec:	4413      	add	r3, r2
 8006cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	011a      	lsls	r2, r3, #4
 8006d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d116      	bne.n	8006d4c <USB_EPStartXfer+0x153c>
 8006d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e083      	b.n	8006e54 <USB_EPStartXfer+0x1644>
 8006d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b3e      	cmp	r3, #62	; 0x3e
 8006d5a:	d820      	bhi.n	8006d9e <USB_EPStartXfer+0x158e>
 8006d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	085b      	lsrs	r3, r3, #1
 8006d6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <USB_EPStartXfer+0x157c>
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d86:	3301      	adds	r3, #1
 8006d88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	029b      	lsls	r3, r3, #10
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e05a      	b.n	8006e54 <USB_EPStartXfer+0x1644>
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f003 031f 	and.w	r3, r3, #31
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <USB_EPStartXfer+0x15be>
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	029b      	lsls	r3, r3, #10
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	e034      	b.n	8006e54 <USB_EPStartXfer+0x1644>
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d12c      	bne.n	8006e54 <USB_EPStartXfer+0x1644>
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e1e:	4413      	add	r3, r2
 8006e20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	011a      	lsls	r2, r3, #4
 8006e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e36:	4413      	add	r3, r2
 8006e38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 8091 	bne.w	8006f96 <USB_EPStartXfer+0x1786>
 8006e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e98:	4413      	add	r3, r2
 8006e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	011a      	lsls	r2, r3, #4
 8006eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d116      	bne.n	8006ef8 <USB_EPStartXfer+0x16e8>
 8006eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e07c      	b.n	8006ff2 <USB_EPStartXfer+0x17e2>
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b3e      	cmp	r3, #62	; 0x3e
 8006f06:	d820      	bhi.n	8006f4a <USB_EPStartXfer+0x173a>
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d004      	beq.n	8006f38 <USB_EPStartXfer+0x1728>
 8006f2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f32:	3301      	adds	r3, #1
 8006f34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	029b      	lsls	r3, r3, #10
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e053      	b.n	8006ff2 <USB_EPStartXfer+0x17e2>
 8006f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <USB_EPStartXfer+0x176a>
 8006f70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f74:	3b01      	subs	r3, #1
 8006f76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	029b      	lsls	r3, r3, #10
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	e02d      	b.n	8006ff2 <USB_EPStartXfer+0x17e2>
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d125      	bne.n	8006ff2 <USB_EPStartXfer+0x17e2>
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	011a      	lsls	r2, r3, #4
 8006fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ff0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 81fe 	beq.w	8007400 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007024:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <USB_EPStartXfer+0x182c>
 8007030:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800703c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 81db 	bne.w	8007400 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800704a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 81d4 	bne.w	8007400 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	441a      	add	r2, r3
 800709c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
 80070b4:	e1a4      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	78db      	ldrb	r3, [r3, #3]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	f040 819a 	bne.w	80073fc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699a      	ldr	r2, [r3, #24]
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d917      	bls.n	8007114 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80070f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	619a      	str	r2, [r3, #24]
 8007112:	e00e      	b.n	8007132 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2200      	movs	r2, #0
 8007130:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d178      	bne.n	8007234 <USB_EPStartXfer+0x1a24>
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007166:	4413      	add	r3, r2
 8007168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	011a      	lsls	r2, r3, #4
 800717a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800717e:	4413      	add	r3, r2
 8007180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d116      	bne.n	80071be <USB_EPStartXfer+0x19ae>
 8007190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e06b      	b.n	8007296 <USB_EPStartXfer+0x1a86>
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c2:	2b3e      	cmp	r3, #62	; 0x3e
 80071c4:	d818      	bhi.n	80071f8 <USB_EPStartXfer+0x19e8>
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <USB_EPStartXfer+0x19d6>
 80071dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	029b      	lsls	r3, r3, #10
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	e04e      	b.n	8007296 <USB_EPStartXfer+0x1a86>
 80071f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fc:	095b      	lsrs	r3, r3, #5
 80071fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <USB_EPStartXfer+0x1a08>
 800720e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007212:	3b01      	subs	r3, #1
 8007214:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721c:	b29b      	uxth	r3, r3
 800721e:	029b      	lsls	r3, r3, #10
 8007220:	b29b      	uxth	r3, r3
 8007222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	e030      	b.n	8007296 <USB_EPStartXfer+0x1a86>
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d128      	bne.n	8007296 <USB_EPStartXfer+0x1a86>
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	4413      	add	r3, r2
 800726a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	011a      	lsls	r2, r3, #4
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	4413      	add	r3, r2
 8007282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800728a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728e:	b29a      	uxth	r2, r3
 8007290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d178      	bne.n	80073a6 <USB_EPStartXfer+0x1b96>
 80072b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d8:	4413      	add	r3, r2
 80072da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	011a      	lsls	r2, r3, #4
 80072ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f0:	4413      	add	r3, r2
 80072f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d116      	bne.n	8007330 <USB_EPStartXfer+0x1b20>
 8007302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e067      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
 8007330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007334:	2b3e      	cmp	r3, #62	; 0x3e
 8007336:	d818      	bhi.n	800736a <USB_EPStartXfer+0x1b5a>
 8007338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <USB_EPStartXfer+0x1b48>
 800734e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007352:	3301      	adds	r3, #1
 8007354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800735c:	b29b      	uxth	r3, r3
 800735e:	029b      	lsls	r3, r3, #10
 8007360:	b29a      	uxth	r2, r3
 8007362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	e04a      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
 800736a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <USB_EPStartXfer+0x1b7a>
 8007380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007384:	3b01      	subs	r3, #1
 8007386:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800738a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800738e:	b29b      	uxth	r3, r3
 8007390:	029b      	lsls	r3, r3, #10
 8007392:	b29b      	uxth	r3, r3
 8007394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	e02c      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d124      	bne.n	8007400 <USB_EPStartXfer+0x1bf0>
 80073b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	461a      	mov	r2, r3
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073cc:	4413      	add	r3, r2
 80073ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	011a      	lsls	r2, r3, #4
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e4:	4413      	add	r3, r2
 80073e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	e001      	b.n	8007400 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e03a      	b.n	8007476 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007426:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800742a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800742e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007432:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007436:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800743a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800743e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	441a      	add	r2, r3
 800745c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	b29b      	uxth	r3, r3
 8007472:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d020      	beq.n	80074d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a8:	81bb      	strh	r3, [r7, #12]
 80074aa:	89bb      	ldrh	r3, [r7, #12]
 80074ac:	f083 0310 	eor.w	r3, r3, #16
 80074b0:	81bb      	strh	r3, [r7, #12]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	89bb      	ldrh	r3, [r7, #12]
 80074be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	8013      	strh	r3, [r2, #0]
 80074d2:	e01f      	b.n	8007514 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	81fb      	strh	r3, [r7, #14]
 80074ec:	89fb      	ldrh	r3, [r7, #14]
 80074ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074f2:	81fb      	strh	r3, [r7, #14]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	441a      	add	r2, r3
 80074fe:	89fb      	ldrh	r3, [r7, #14]
 8007500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	b29b      	uxth	r3, r3
 8007512:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	7b1b      	ldrb	r3, [r3, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 809d 	bne.w	800766e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d04c      	beq.n	80075d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	823b      	strh	r3, [r7, #16]
 800754a:	8a3b      	ldrh	r3, [r7, #16]
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01b      	beq.n	800758c <USB_EPClearStall+0x6c>
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	81fb      	strh	r3, [r7, #14]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	89fb      	ldrh	r3, [r7, #14]
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	78db      	ldrb	r3, [r3, #3]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d06c      	beq.n	800766e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075aa:	81bb      	strh	r3, [r7, #12]
 80075ac:	89bb      	ldrh	r3, [r7, #12]
 80075ae:	f083 0320 	eor.w	r3, r3, #32
 80075b2:	81bb      	strh	r3, [r7, #12]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	89bb      	ldrh	r3, [r7, #12]
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]
 80075d4:	e04b      	b.n	800766e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	82fb      	strh	r3, [r7, #22]
 80075e4:	8afb      	ldrh	r3, [r7, #22]
 80075e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01b      	beq.n	8007626 <USB_EPClearStall+0x106>
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007604:	82bb      	strh	r3, [r7, #20]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	8abb      	ldrh	r3, [r7, #20]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800761e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763c:	827b      	strh	r3, [r7, #18]
 800763e:	8a7b      	ldrh	r3, [r7, #18]
 8007640:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007644:	827b      	strh	r3, [r7, #18]
 8007646:	8a7b      	ldrh	r3, [r7, #18]
 8007648:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800764c:	827b      	strh	r3, [r7, #18]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	441a      	add	r2, r3
 8007658:	8a7b      	ldrh	r3, [r7, #18]
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2280      	movs	r2, #128	; 0x80
 8007690:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076da:	68fb      	ldr	r3, [r7, #12]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr

080076e6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b08d      	sub	sp, #52	; 0x34
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	460b      	mov	r3, r1
 800770c:	80fb      	strh	r3, [r7, #6]
 800770e:	4613      	mov	r3, r2
 8007710:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007712:	88bb      	ldrh	r3, [r7, #4]
 8007714:	3301      	adds	r3, #1
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	005a      	lsls	r2, r3, #1
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007734:	e01e      	b.n	8007774 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	3301      	adds	r3, #1
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	b29a      	uxth	r2, r3
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	3302      	adds	r3, #2
 8007760:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	3302      	adds	r3, #2
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	3301      	adds	r3, #1
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	3b01      	subs	r3, #1
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1dd      	bne.n	8007736 <USB_WritePMA+0x3a>
  }
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	3734      	adds	r7, #52	; 0x34
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007786:	b480      	push	{r7}
 8007788:	b08b      	sub	sp, #44	; 0x2c
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	4611      	mov	r1, r2
 8007792:	461a      	mov	r2, r3
 8007794:	460b      	mov	r3, r1
 8007796:	80fb      	strh	r3, [r7, #6]
 8007798:	4613      	mov	r3, r2
 800779a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800779c:	88bb      	ldrh	r3, [r7, #4]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	005a      	lsls	r2, r3, #1
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
 80077be:	e01b      	b.n	80077f8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	3302      	adds	r3, #2
 80077cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	3301      	adds	r3, #1
 80077da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	3302      	adds	r3, #2
 80077f0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	3b01      	subs	r3, #1
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e0      	bne.n	80077c0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077fe:	88bb      	ldrh	r3, [r7, #4]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	b2da      	uxtb	r2, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	701a      	strb	r2, [r3, #0]
  }
}
 800781a:	bf00      	nop
 800781c:	372c      	adds	r7, #44	; 0x2c
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c1b      	ldrb	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d115      	bne.n	8007868 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800783c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007840:	2202      	movs	r2, #2
 8007842:	2181      	movs	r1, #129	; 0x81
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fe30 	bl	80094aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007854:	2202      	movs	r2, #2
 8007856:	2101      	movs	r1, #1
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fe26 	bl	80094aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007866:	e012      	b.n	800788e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007868:	2340      	movs	r3, #64	; 0x40
 800786a:	2202      	movs	r2, #2
 800786c:	2181      	movs	r1, #129	; 0x81
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fe1b 	bl	80094aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	2202      	movs	r2, #2
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 fe12 	bl	80094aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800788e:	2308      	movs	r3, #8
 8007890:	2203      	movs	r2, #3
 8007892:	2182      	movs	r1, #130	; 0x82
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 fe08 	bl	80094aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078a4:	f001 ff28 	bl	80096f8 <USBD_static_malloc>
 80078a8:	4602      	mov	r2, r0
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80078ba:	2301      	movs	r3, #1
 80078bc:	73fb      	strb	r3, [r7, #15]
 80078be:	e026      	b.n	800790e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7c1b      	ldrb	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f4:	2101      	movs	r1, #1
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fec8 	bl	800968c <USBD_LL_PrepareReceive>
 80078fc:	e007      	b.n	800790e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007904:	2340      	movs	r3, #64	; 0x40
 8007906:	2101      	movs	r1, #1
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 febf 	bl	800968c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007928:	2181      	movs	r1, #129	; 0x81
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fde3 	bl	80094f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007936:	2101      	movs	r1, #1
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 fddc 	bl	80094f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007946:	2182      	movs	r1, #130	; 0x82
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fdd4 	bl	80094f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fece 	bl	8009710 <USBD_static_free>
    pdev->pClassData = NULL;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007996:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d039      	beq.n	8007a24 <USBD_CDC_Setup+0x9e>
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d17f      	bne.n	8007ab4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	88db      	ldrh	r3, [r3, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d029      	beq.n	8007a10 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b25b      	sxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da11      	bge.n	80079ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	88d2      	ldrh	r2, [r2, #6]
 80079d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079da:	6939      	ldr	r1, [r7, #16]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 f9d9 	bl	8008d9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079e8:	e06b      	b.n	8007ac2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785a      	ldrb	r2, [r3, #1]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	88db      	ldrh	r3, [r3, #6]
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a00:	6939      	ldr	r1, [r7, #16]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f9f4 	bl	8008df6 <USBD_CtlPrepareRx>
      break;
 8007a0e:	e058      	b.n	8007ac2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	7850      	ldrb	r0, [r2, #1]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	4798      	blx	r3
      break;
 8007a22:	e04e      	b.n	8007ac2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b0b      	cmp	r3, #11
 8007a2a:	d02e      	beq.n	8007a8a <USBD_CDC_Setup+0x104>
 8007a2c:	2b0b      	cmp	r3, #11
 8007a2e:	dc38      	bgt.n	8007aa2 <USBD_CDC_Setup+0x11c>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <USBD_CDC_Setup+0xb4>
 8007a34:	2b0a      	cmp	r3, #10
 8007a36:	d014      	beq.n	8007a62 <USBD_CDC_Setup+0xdc>
 8007a38:	e033      	b.n	8007aa2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d107      	bne.n	8007a54 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a44:	f107 030c 	add.w	r3, r7, #12
 8007a48:	2202      	movs	r2, #2
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f9a4 	bl	8008d9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a52:	e02e      	b.n	8007ab2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 f935 	bl	8008cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a60:	e027      	b.n	8007ab2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d107      	bne.n	8007a7c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a6c:	f107 030f 	add.w	r3, r7, #15
 8007a70:	2201      	movs	r2, #1
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f990 	bl	8008d9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a7a:	e01a      	b.n	8007ab2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f921 	bl	8008cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a84:	2302      	movs	r3, #2
 8007a86:	75fb      	strb	r3, [r7, #23]
          break;
 8007a88:	e013      	b.n	8007ab2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d00d      	beq.n	8007ab0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f915 	bl	8008cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007aa0:	e006      	b.n	8007ab0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 f90e 	bl	8008cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	75fb      	strb	r3, [r7, #23]
          break;
 8007aae:	e000      	b.n	8007ab2 <USBD_CDC_Setup+0x12c>
          break;
 8007ab0:	bf00      	nop
      }
      break;
 8007ab2:	e006      	b.n	8007ac2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 f905 	bl	8008cc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac0:	bf00      	nop
  }

  return ret;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ade:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d03a      	beq.n	8007b68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	331c      	adds	r3, #28
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d029      	beq.n	8007b5c <USBD_CDC_DataIn+0x90>
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	331c      	adds	r3, #28
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	78f9      	ldrb	r1, [r7, #3]
 8007b1c:	68b8      	ldr	r0, [r7, #8]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	4403      	add	r3, r0
 8007b28:	3338      	adds	r3, #56	; 0x38
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d110      	bne.n	8007b5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	331c      	adds	r3, #28
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b4e:	78f9      	ldrb	r1, [r7, #3]
 8007b50:	2300      	movs	r3, #0
 8007b52:	2200      	movs	r2, #0
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fd76 	bl	8009646 <USBD_LL_Transmit>
 8007b5a:	e003      	b.n	8007b64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e000      	b.n	8007b6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b68:	2302      	movs	r3, #2
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fda1 	bl	80096d2 <USBD_LL_GetRxDataSize>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00d      	beq.n	8007bbe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4798      	blx	r3

    return USBD_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e000      	b.n	8007bc0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007bbe:	2302      	movs	r3, #2
  }
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d015      	beq.n	8007c0e <USBD_CDC_EP0_RxReady+0x46>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007be8:	2bff      	cmp	r3, #255	; 0xff
 8007bea:	d010      	beq.n	8007c0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007bfa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c02:	b292      	uxth	r2, r2
 8007c04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22ff      	movs	r2, #255	; 0xff
 8007c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2243      	movs	r2, #67	; 0x43
 8007c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c26:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000094 	.word	0x20000094

08007c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2243      	movs	r2, #67	; 0x43
 8007c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c46:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000050 	.word	0x20000050

08007c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2243      	movs	r2, #67	; 0x43
 8007c64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c66:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	200000d8 	.word	0x200000d8

08007c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	220a      	movs	r2, #10
 8007c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c86:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	2000000c 	.word	0x2000000c

08007c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ce2:	88fa      	ldrh	r2, [r7, #6]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d017      	beq.n	8007d66 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d48:	2101      	movs	r1, #1
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 fc9e 	bl	800968c <USBD_LL_PrepareReceive>
 8007d50:	e007      	b.n	8007d62 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fc95 	bl	800968c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d66:	2302      	movs	r3, #2
  }
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	e01a      	b.n	8007dbe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	79fa      	ldrb	r2, [r7, #7]
 8007db4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f001 fb02 	bl	80093c0 <USBD_LL_Init>

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d006      	beq.n	8007de8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
 8007de6:	e001      	b.n	8007dec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007de8:	2302      	movs	r3, #2
 8007dea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 fb37 	bl	8009474 <USBD_LL_Start>

  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e30:	2302      	movs	r3, #2
 8007e32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00c      	beq.n	8007e58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fed7 	bl	8008c4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d016      	beq.n	8007ef2 <USBD_LL_SetupStage+0x6a>
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d81c      	bhi.n	8007f02 <USBD_LL_SetupStage+0x7a>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <USBD_LL_SetupStage+0x4a>
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d008      	beq.n	8007ee2 <USBD_LL_SetupStage+0x5a>
 8007ed0:	e017      	b.n	8007f02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9ca 	bl	8008274 <USBD_StdDevReq>
      break;
 8007ee0:	e01a      	b.n	8007f18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa2c 	bl	8008348 <USBD_StdItfReq>
      break;
 8007ef0:	e012      	b.n	8007f18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa6c 	bl	80083d8 <USBD_StdEPReq>
      break;
 8007f00:	e00a      	b.n	8007f18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fb0f 	bl	8009534 <USBD_LL_StallEP>
      break;
 8007f16:	bf00      	nop
  }

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d14b      	bne.n	8007fce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d134      	bne.n	8007fb2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d919      	bls.n	8007f88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	1ad2      	subs	r2, r2, r3
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d203      	bcs.n	8007f76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	e002      	b.n	8007f7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 ff56 	bl	8008e32 <USBD_CtlContinueRx>
 8007f86:	e038      	b.n	8007ffa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d105      	bne.n	8007faa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 ff53 	bl	8008e56 <USBD_CtlSendStatus>
 8007fb0:	e023      	b.n	8007ffa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d11e      	bne.n	8007ffa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f001 fab4 	bl	8009534 <USBD_LL_StallEP>
 8007fcc:	e015      	b.n	8007ffa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00d      	beq.n	8007ff6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d108      	bne.n	8007ff6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	7afa      	ldrb	r2, [r7, #11]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	4798      	blx	r3
 8007ff4:	e001      	b.n	8007ffa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e000      	b.n	8007ffc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	460b      	mov	r3, r1
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d17f      	bne.n	8008118 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3314      	adds	r3, #20
 800801c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008024:	2b02      	cmp	r3, #2
 8008026:	d15c      	bne.n	80080e2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d915      	bls.n	8008060 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	1ad2      	subs	r2, r2, r3
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	b29b      	uxth	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fec0 	bl	8008dd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008052:	2300      	movs	r3, #0
 8008054:	2200      	movs	r2, #0
 8008056:	2100      	movs	r1, #0
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 fb17 	bl	800968c <USBD_LL_PrepareReceive>
 800805e:	e04e      	b.n	80080fe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	6912      	ldr	r2, [r2, #16]
 8008068:	fbb3 f1f2 	udiv	r1, r3, r2
 800806c:	fb01 f202 	mul.w	r2, r1, r2
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d11c      	bne.n	80080b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800807e:	429a      	cmp	r2, r3
 8008080:	d316      	bcc.n	80080b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800808c:	429a      	cmp	r2, r3
 800808e:	d20f      	bcs.n	80080b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 fe9c 	bl	8008dd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080a2:	2300      	movs	r3, #0
 80080a4:	2200      	movs	r2, #0
 80080a6:	2100      	movs	r1, #0
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f001 faef 	bl	800968c <USBD_LL_PrepareReceive>
 80080ae:	e026      	b.n	80080fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d105      	bne.n	80080d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80080d2:	2180      	movs	r1, #128	; 0x80
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f001 fa2d 	bl	8009534 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fece 	bl	8008e7c <USBD_CtlReceiveStatus>
 80080e0:	e00d      	b.n	80080fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d004      	beq.n	80080f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f001 fa1b 	bl	8009534 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008104:	2b01      	cmp	r3, #1
 8008106:	d11d      	bne.n	8008144 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fe81 	bl	8007e10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008116:	e015      	b.n	8008144 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800812a:	2b03      	cmp	r3, #3
 800812c:	d108      	bne.n	8008140 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	7afa      	ldrb	r2, [r7, #11]
 8008138:	4611      	mov	r1, r2
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	4798      	blx	r3
 800813e:	e001      	b.n	8008144 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008140:	2302      	movs	r3, #2
 8008142:	e000      	b.n	8008146 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008156:	2340      	movs	r3, #64	; 0x40
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 f9a4 	bl	80094aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2240      	movs	r2, #64	; 0x40
 800816e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	2200      	movs	r2, #0
 8008176:	2180      	movs	r1, #128	; 0x80
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f996 	bl	80094aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2240      	movs	r2, #64	; 0x40
 8008188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6852      	ldr	r2, [r2, #4]
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	4611      	mov	r1, r2
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
  }

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr

080081ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2204      	movs	r2, #4
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr

08008216 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008224:	2b04      	cmp	r3, #4
 8008226:	d105      	bne.n	8008234 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr

08008240 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	2b03      	cmp	r3, #3
 8008250:	d10b      	bne.n	800826a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d005      	beq.n	800829a <USBD_StdDevReq+0x26>
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d84f      	bhi.n	8008332 <USBD_StdDevReq+0xbe>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <USBD_StdDevReq+0x36>
 8008296:	2b20      	cmp	r3, #32
 8008298:	d14b      	bne.n	8008332 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
      break;
 80082a8:	e048      	b.n	800833c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	785b      	ldrb	r3, [r3, #1]
 80082ae:	2b09      	cmp	r3, #9
 80082b0:	d839      	bhi.n	8008326 <USBD_StdDevReq+0xb2>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <USBD_StdDevReq+0x44>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	08008309 	.word	0x08008309
 80082bc:	0800831d 	.word	0x0800831d
 80082c0:	08008327 	.word	0x08008327
 80082c4:	08008313 	.word	0x08008313
 80082c8:	08008327 	.word	0x08008327
 80082cc:	080082eb 	.word	0x080082eb
 80082d0:	080082e1 	.word	0x080082e1
 80082d4:	08008327 	.word	0x08008327
 80082d8:	080082ff 	.word	0x080082ff
 80082dc:	080082f5 	.word	0x080082f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f9dc 	bl	80086a0 <USBD_GetDescriptor>
          break;
 80082e8:	e022      	b.n	8008330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fb3f 	bl	8008970 <USBD_SetAddress>
          break;
 80082f2:	e01d      	b.n	8008330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fb7e 	bl	80089f8 <USBD_SetConfig>
          break;
 80082fc:	e018      	b.n	8008330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc07 	bl	8008b14 <USBD_GetConfig>
          break;
 8008306:	e013      	b.n	8008330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fc37 	bl	8008b7e <USBD_GetStatus>
          break;
 8008310:	e00e      	b.n	8008330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fc65 	bl	8008be4 <USBD_SetFeature>
          break;
 800831a:	e009      	b.n	8008330 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fc74 	bl	8008c0c <USBD_ClrFeature>
          break;
 8008324:	e004      	b.n	8008330 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fccc 	bl	8008cc6 <USBD_CtlError>
          break;
 800832e:	bf00      	nop
      }
      break;
 8008330:	e004      	b.n	800833c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fcc6 	bl	8008cc6 <USBD_CtlError>
      break;
 800833a:	bf00      	nop
  }

  return ret;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop

08008348 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d005      	beq.n	800836e <USBD_StdItfReq+0x26>
 8008362:	2b40      	cmp	r3, #64	; 0x40
 8008364:	d82e      	bhi.n	80083c4 <USBD_StdItfReq+0x7c>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <USBD_StdItfReq+0x26>
 800836a:	2b20      	cmp	r3, #32
 800836c:	d12a      	bne.n	80083c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	3b01      	subs	r3, #1
 8008376:	2b02      	cmp	r3, #2
 8008378:	d81d      	bhi.n	80083b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	889b      	ldrh	r3, [r3, #4]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b01      	cmp	r3, #1
 8008382:	d813      	bhi.n	80083ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	88db      	ldrh	r3, [r3, #6]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d110      	bne.n	80083c0 <USBD_StdItfReq+0x78>
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10d      	bne.n	80083c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fd56 	bl	8008e56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083aa:	e009      	b.n	80083c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fc89 	bl	8008cc6 <USBD_CtlError>
          break;
 80083b4:	e004      	b.n	80083c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fc84 	bl	8008cc6 <USBD_CtlError>
          break;
 80083be:	e000      	b.n	80083c2 <USBD_StdItfReq+0x7a>
          break;
 80083c0:	bf00      	nop
      }
      break;
 80083c2:	e004      	b.n	80083ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fc7d 	bl	8008cc6 <USBD_CtlError>
      break;
 80083cc:	bf00      	nop
  }

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	889b      	ldrh	r3, [r3, #4]
 80083ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d007      	beq.n	8008408 <USBD_StdEPReq+0x30>
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	f200 8146 	bhi.w	800868a <USBD_StdEPReq+0x2b2>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <USBD_StdEPReq+0x40>
 8008402:	2b20      	cmp	r3, #32
 8008404:	f040 8141 	bne.w	800868a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
      break;
 8008416:	e13d      	b.n	8008694 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008420:	2b20      	cmp	r3, #32
 8008422:	d10a      	bne.n	800843a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	e12d      	b.n	8008696 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b03      	cmp	r3, #3
 8008440:	d007      	beq.n	8008452 <USBD_StdEPReq+0x7a>
 8008442:	2b03      	cmp	r3, #3
 8008444:	f300 811b 	bgt.w	800867e <USBD_StdEPReq+0x2a6>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d072      	beq.n	8008532 <USBD_StdEPReq+0x15a>
 800844c:	2b01      	cmp	r3, #1
 800844e:	d03a      	beq.n	80084c6 <USBD_StdEPReq+0xee>
 8008450:	e115      	b.n	800867e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008458:	2b02      	cmp	r3, #2
 800845a:	d002      	beq.n	8008462 <USBD_StdEPReq+0x8a>
 800845c:	2b03      	cmp	r3, #3
 800845e:	d015      	beq.n	800848c <USBD_StdEPReq+0xb4>
 8008460:	e02b      	b.n	80084ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00c      	beq.n	8008482 <USBD_StdEPReq+0xaa>
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d009      	beq.n	8008482 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f85e 	bl	8009534 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008478:	2180      	movs	r1, #128	; 0x80
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 f85a 	bl	8009534 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008480:	e020      	b.n	80084c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fc1e 	bl	8008cc6 <USBD_CtlError>
              break;
 800848a:	e01b      	b.n	80084c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	885b      	ldrh	r3, [r3, #2]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10e      	bne.n	80084b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00b      	beq.n	80084b2 <USBD_StdEPReq+0xda>
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b80      	cmp	r3, #128	; 0x80
 800849e:	d008      	beq.n	80084b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	88db      	ldrh	r3, [r3, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 f841 	bl	8009534 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fccf 	bl	8008e56 <USBD_CtlSendStatus>

              break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc02 	bl	8008cc6 <USBD_CtlError>
              break;
 80084c2:	bf00      	nop
          }
          break;
 80084c4:	e0e0      	b.n	8008688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d002      	beq.n	80084d6 <USBD_StdEPReq+0xfe>
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d015      	beq.n	8008500 <USBD_StdEPReq+0x128>
 80084d4:	e026      	b.n	8008524 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <USBD_StdEPReq+0x11e>
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b80      	cmp	r3, #128	; 0x80
 80084e0:	d009      	beq.n	80084f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f824 	bl	8009534 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80084ec:	2180      	movs	r1, #128	; 0x80
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 f820 	bl	8009534 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084f4:	e01c      	b.n	8008530 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fbe4 	bl	8008cc6 <USBD_CtlError>
              break;
 80084fe:	e017      	b.n	8008530 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	885b      	ldrh	r3, [r3, #2]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d112      	bne.n	800852e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d004      	beq.n	800851c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 f82b 	bl	8009572 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fc9a 	bl	8008e56 <USBD_CtlSendStatus>
              }
              break;
 8008522:	e004      	b.n	800852e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fbcd 	bl	8008cc6 <USBD_CtlError>
              break;
 800852c:	e000      	b.n	8008530 <USBD_StdEPReq+0x158>
              break;
 800852e:	bf00      	nop
          }
          break;
 8008530:	e0aa      	b.n	8008688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	2b02      	cmp	r3, #2
 800853a:	d002      	beq.n	8008542 <USBD_StdEPReq+0x16a>
 800853c:	2b03      	cmp	r3, #3
 800853e:	d032      	beq.n	80085a6 <USBD_StdEPReq+0x1ce>
 8008540:	e097      	b.n	8008672 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <USBD_StdEPReq+0x180>
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b80      	cmp	r3, #128	; 0x80
 800854c:	d004      	beq.n	8008558 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fbb8 	bl	8008cc6 <USBD_CtlError>
                break;
 8008556:	e091      	b.n	800867c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da0b      	bge.n	8008578 <USBD_StdEPReq+0x1a0>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	3310      	adds	r3, #16
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	3304      	adds	r3, #4
 8008576:	e00b      	b.n	8008590 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	3304      	adds	r3, #4
 8008590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2202      	movs	r2, #2
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fbfb 	bl	8008d9a <USBD_CtlSendData>
              break;
 80085a4:	e06a      	b.n	800867c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da11      	bge.n	80085d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	f003 020f 	and.w	r2, r3, #15
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	3318      	adds	r3, #24
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d117      	bne.n	80085f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fb7b 	bl	8008cc6 <USBD_CtlError>
                  break;
 80085d0:	e054      	b.n	800867c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fb68 	bl	8008cc6 <USBD_CtlError>
                  break;
 80085f6:	e041      	b.n	800867c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	da0b      	bge.n	8008618 <USBD_StdEPReq+0x240>
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	3310      	adds	r3, #16
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	4413      	add	r3, r2
 8008614:	3304      	adds	r3, #4
 8008616:	e00b      	b.n	8008630 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4413      	add	r3, r2
 800862e:	3304      	adds	r3, #4
 8008630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <USBD_StdEPReq+0x266>
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d103      	bne.n	8008646 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e00e      	b.n	8008664 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 ffb0 	bl	80095b0 <USBD_LL_IsStallEP>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2201      	movs	r2, #1
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	e002      	b.n	8008664 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2202      	movs	r2, #2
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb95 	bl	8008d9a <USBD_CtlSendData>
              break;
 8008670:	e004      	b.n	800867c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fb26 	bl	8008cc6 <USBD_CtlError>
              break;
 800867a:	bf00      	nop
          }
          break;
 800867c:	e004      	b.n	8008688 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fb20 	bl	8008cc6 <USBD_CtlError>
          break;
 8008686:	bf00      	nop
      }
      break;
 8008688:	e004      	b.n	8008694 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fb1a 	bl	8008cc6 <USBD_CtlError>
      break;
 8008692:	bf00      	nop
  }

  return ret;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	2b06      	cmp	r3, #6
 80086c2:	f200 8128 	bhi.w	8008916 <USBD_GetDescriptor+0x276>
 80086c6:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBD_GetDescriptor+0x2c>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086e9 	.word	0x080086e9
 80086d0:	08008701 	.word	0x08008701
 80086d4:	08008741 	.word	0x08008741
 80086d8:	08008917 	.word	0x08008917
 80086dc:	08008917 	.word	0x08008917
 80086e0:	080088b7 	.word	0x080088b7
 80086e4:	080088e3 	.word	0x080088e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7c12      	ldrb	r2, [r2, #16]
 80086f4:	f107 0108 	add.w	r1, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
      break;
 80086fe:	e112      	b.n	8008926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7c1b      	ldrb	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10d      	bne.n	8008724 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	f107 0208 	add.w	r2, r7, #8
 8008714:	4610      	mov	r0, r2
 8008716:	4798      	blx	r3
 8008718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3301      	adds	r3, #1
 800871e:	2202      	movs	r2, #2
 8008720:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008722:	e100      	b.n	8008926 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	f107 0208 	add.w	r2, r7, #8
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
 8008734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3301      	adds	r3, #1
 800873a:	2202      	movs	r2, #2
 800873c:	701a      	strb	r2, [r3, #0]
      break;
 800873e:	e0f2      	b.n	8008926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b05      	cmp	r3, #5
 8008748:	f200 80ac 	bhi.w	80088a4 <USBD_GetDescriptor+0x204>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <USBD_GetDescriptor+0xb4>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	0800876d 	.word	0x0800876d
 8008758:	080087a1 	.word	0x080087a1
 800875c:	080087d5 	.word	0x080087d5
 8008760:	08008809 	.word	0x08008809
 8008764:	0800883d 	.word	0x0800883d
 8008768:	08008871 	.word	0x08008871
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	f107 0108 	add.w	r1, r7, #8
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800878e:	e091      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa97 	bl	8008cc6 <USBD_CtlError>
            err++;
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	3301      	adds	r3, #1
 800879c:	72fb      	strb	r3, [r7, #11]
          break;
 800879e:	e089      	b.n	80088b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	7c12      	ldrb	r2, [r2, #16]
 80087b8:	f107 0108 	add.w	r1, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087c2:	e077      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa7d 	bl	8008cc6 <USBD_CtlError>
            err++;
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
          break;
 80087d2:	e06f      	b.n	80088b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7c12      	ldrb	r2, [r2, #16]
 80087ec:	f107 0108 	add.w	r1, r7, #8
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087f6:	e05d      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa63 	bl	8008cc6 <USBD_CtlError>
            err++;
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	3301      	adds	r3, #1
 8008804:	72fb      	strb	r3, [r7, #11]
          break;
 8008806:	e055      	b.n	80088b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00b      	beq.n	800882c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	7c12      	ldrb	r2, [r2, #16]
 8008820:	f107 0108 	add.w	r1, r7, #8
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
 8008828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800882a:	e043      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa49 	bl	8008cc6 <USBD_CtlError>
            err++;
 8008834:	7afb      	ldrb	r3, [r7, #11]
 8008836:	3301      	adds	r3, #1
 8008838:	72fb      	strb	r3, [r7, #11]
          break;
 800883a:	e03b      	b.n	80088b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	7c12      	ldrb	r2, [r2, #16]
 8008854:	f107 0108 	add.w	r1, r7, #8
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
 800885c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800885e:	e029      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa2f 	bl	8008cc6 <USBD_CtlError>
            err++;
 8008868:	7afb      	ldrb	r3, [r7, #11]
 800886a:	3301      	adds	r3, #1
 800886c:	72fb      	strb	r3, [r7, #11]
          break;
 800886e:	e021      	b.n	80088b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00b      	beq.n	8008894 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	7c12      	ldrb	r2, [r2, #16]
 8008888:	f107 0108 	add.w	r1, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008892:	e00f      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa15 	bl	8008cc6 <USBD_CtlError>
            err++;
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	3301      	adds	r3, #1
 80088a0:	72fb      	strb	r3, [r7, #11]
          break;
 80088a2:	e007      	b.n	80088b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fa0d 	bl	8008cc6 <USBD_CtlError>
          err++;
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	3301      	adds	r3, #1
 80088b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80088b2:	e038      	b.n	8008926 <USBD_GetDescriptor+0x286>
 80088b4:	e037      	b.n	8008926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7c1b      	ldrb	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d109      	bne.n	80088d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	f107 0208 	add.w	r2, r7, #8
 80088ca:	4610      	mov	r0, r2
 80088cc:	4798      	blx	r3
 80088ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d0:	e029      	b.n	8008926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f9f6 	bl	8008cc6 <USBD_CtlError>
        err++;
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	3301      	adds	r3, #1
 80088de:	72fb      	strb	r3, [r7, #11]
      break;
 80088e0:	e021      	b.n	8008926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7c1b      	ldrb	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10d      	bne.n	8008906 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	f107 0208 	add.w	r2, r7, #8
 80088f6:	4610      	mov	r0, r2
 80088f8:	4798      	blx	r3
 80088fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	2207      	movs	r2, #7
 8008902:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008904:	e00f      	b.n	8008926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f9dc 	bl	8008cc6 <USBD_CtlError>
        err++;
 800890e:	7afb      	ldrb	r3, [r7, #11]
 8008910:	3301      	adds	r3, #1
 8008912:	72fb      	strb	r3, [r7, #11]
      break;
 8008914:	e007      	b.n	8008926 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f9d4 	bl	8008cc6 <USBD_CtlError>
      err++;
 800891e:	7afb      	ldrb	r3, [r7, #11]
 8008920:	3301      	adds	r3, #1
 8008922:	72fb      	strb	r3, [r7, #11]
      break;
 8008924:	bf00      	nop
  }

  if (err != 0U)
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d11c      	bne.n	8008966 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800892c:	893b      	ldrh	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d011      	beq.n	8008956 <USBD_GetDescriptor+0x2b6>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88db      	ldrh	r3, [r3, #6]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88da      	ldrh	r2, [r3, #6]
 800893e:	893b      	ldrh	r3, [r7, #8]
 8008940:	4293      	cmp	r3, r2
 8008942:	bf28      	it	cs
 8008944:	4613      	movcs	r3, r2
 8008946:	b29b      	uxth	r3, r3
 8008948:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800894a:	893b      	ldrh	r3, [r7, #8]
 800894c:	461a      	mov	r2, r3
 800894e:	68f9      	ldr	r1, [r7, #12]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fa22 	bl	8008d9a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	88db      	ldrh	r3, [r3, #6]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa79 	bl	8008e56 <USBD_CtlSendStatus>
 8008964:	e000      	b.n	8008968 <USBD_GetDescriptor+0x2c8>
    return;
 8008966:	bf00      	nop
    }
  }
}
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d130      	bne.n	80089e4 <USBD_SetAddress+0x74>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d12c      	bne.n	80089e4 <USBD_SetAddress+0x74>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	2b7f      	cmp	r3, #127	; 0x7f
 8008990:	d828      	bhi.n	80089e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	885b      	ldrh	r3, [r3, #2]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d104      	bne.n	80089b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f98b 	bl	8008cc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b0:	e01d      	b.n	80089ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7bfa      	ldrb	r2, [r7, #15]
 80089b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fe22 	bl	8009608 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fa46 	bl	8008e56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d8:	e009      	b.n	80089ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e2:	e004      	b.n	80089ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f96d 	bl	8008cc6 <USBD_CtlError>
  }
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	885b      	ldrh	r3, [r3, #2]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	4b41      	ldr	r3, [pc, #260]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a0c:	4b40      	ldr	r3, [pc, #256]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d904      	bls.n	8008a1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f955 	bl	8008cc6 <USBD_CtlError>
 8008a1c:	e075      	b.n	8008b0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d002      	beq.n	8008a2e <USBD_SetConfig+0x36>
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d023      	beq.n	8008a74 <USBD_SetConfig+0x7c>
 8008a2c:	e062      	b.n	8008af4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a2e:	4b38      	ldr	r3, [pc, #224]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01a      	beq.n	8008a6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a36:	4b36      	ldr	r3, [pc, #216]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2203      	movs	r2, #3
 8008a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a48:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff f9e8 	bl	8007e24 <USBD_SetClassConfig>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d104      	bne.n	8008a64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f932 	bl	8008cc6 <USBD_CtlError>
            return;
 8008a62:	e052      	b.n	8008b0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9f6 	bl	8008e56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a6a:	e04e      	b.n	8008b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f9f2 	bl	8008e56 <USBD_CtlSendStatus>
        break;
 8008a72:	e04a      	b.n	8008b0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a74:	4b26      	ldr	r3, [pc, #152]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d112      	bne.n	8008aa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a84:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <USBD_SetConfig+0x118>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff f9e4 	bl	8007e62 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9db 	bl	8008e56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008aa0:	e033      	b.n	8008b0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <USBD_SetConfig+0x118>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d01d      	beq.n	8008aec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff f9d2 	bl	8007e62 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008abe:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <USBD_SetConfig+0x118>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ac8:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <USBD_SetConfig+0x118>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff f9a8 	bl	8007e24 <USBD_SetClassConfig>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d104      	bne.n	8008ae4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f8f2 	bl	8008cc6 <USBD_CtlError>
            return;
 8008ae2:	e012      	b.n	8008b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f9b6 	bl	8008e56 <USBD_CtlSendStatus>
        break;
 8008aea:	e00e      	b.n	8008b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9b2 	bl	8008e56 <USBD_CtlSendStatus>
        break;
 8008af2:	e00a      	b.n	8008b0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8e5 	bl	8008cc6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <USBD_SetConfig+0x118>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff f9ad 	bl	8007e62 <USBD_ClrClassConfig>
        break;
 8008b08:	bf00      	nop
    }
  }
}
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000450 	.word	0x20000450

08008b14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d004      	beq.n	8008b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f8cc 	bl	8008cc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b2e:	e022      	b.n	8008b76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	dc02      	bgt.n	8008b40 <USBD_GetConfig+0x2c>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dc03      	bgt.n	8008b46 <USBD_GetConfig+0x32>
 8008b3e:	e015      	b.n	8008b6c <USBD_GetConfig+0x58>
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d00b      	beq.n	8008b5c <USBD_GetConfig+0x48>
 8008b44:	e012      	b.n	8008b6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	2201      	movs	r2, #1
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f920 	bl	8008d9a <USBD_CtlSendData>
        break;
 8008b5a:	e00c      	b.n	8008b76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	2201      	movs	r2, #1
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f918 	bl	8008d9a <USBD_CtlSendData>
        break;
 8008b6a:	e004      	b.n	8008b76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f8a9 	bl	8008cc6 <USBD_CtlError>
        break;
 8008b74:	bf00      	nop
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d81e      	bhi.n	8008bd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	88db      	ldrh	r3, [r3, #6]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d004      	beq.n	8008ba6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f891 	bl	8008cc6 <USBD_CtlError>
        break;
 8008ba4:	e01a      	b.n	8008bdc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f043 0202 	orr.w	r2, r3, #2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f8e5 	bl	8008d9a <USBD_CtlSendData>
      break;
 8008bd0:	e004      	b.n	8008bdc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f876 	bl	8008cc6 <USBD_CtlError>
      break;
 8008bda:	bf00      	nop
  }
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d106      	bne.n	8008c04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f929 	bl	8008e56 <USBD_CtlSendStatus>
  }
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d80b      	bhi.n	8008c3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	885b      	ldrh	r3, [r3, #2]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d10c      	bne.n	8008c44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f90f 	bl	8008e56 <USBD_CtlSendStatus>
      }
      break;
 8008c38:	e004      	b.n	8008c44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f842 	bl	8008cc6 <USBD_CtlError>
      break;
 8008c42:	e000      	b.n	8008c46 <USBD_ClrFeature+0x3a>
      break;
 8008c44:	bf00      	nop
  }
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	785a      	ldrb	r2, [r3, #1]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	3302      	adds	r3, #2
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	3303      	adds	r3, #3
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	3304      	adds	r3, #4
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	3305      	adds	r3, #5
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	4413      	add	r3, r2
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	3306      	adds	r3, #6
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	3307      	adds	r3, #7
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	80da      	strh	r2, [r3, #6]

}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr

08008cc6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008cd0:	2180      	movs	r1, #128	; 0x80
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc2e 	bl	8009534 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fc2a 	bl	8009534 <USBD_LL_StallEP>
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d032      	beq.n	8008d64 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f834 	bl	8008d6c <USBD_GetLen>
 8008d04:	4603      	mov	r3, r0
 8008d06:	3301      	adds	r3, #1
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	75fa      	strb	r2, [r7, #23]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	7812      	ldrb	r2, [r2, #0]
 8008d22:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	75fa      	strb	r2, [r7, #23]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4413      	add	r3, r2
 8008d30:	2203      	movs	r2, #3
 8008d32:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d34:	e012      	b.n	8008d5c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	60fa      	str	r2, [r7, #12]
 8008d3c:	7dfa      	ldrb	r2, [r7, #23]
 8008d3e:	1c51      	adds	r1, r2, #1
 8008d40:	75f9      	strb	r1, [r7, #23]
 8008d42:	4611      	mov	r1, r2
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	440a      	add	r2, r1
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	75fa      	strb	r2, [r7, #23]
 8008d52:	461a      	mov	r2, r3
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4413      	add	r3, r2
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e8      	bne.n	8008d36 <USBD_GetString+0x4e>
    }
  }
}
 8008d64:	bf00      	nop
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008d78:	e005      	b.n	8008d86 <USBD_GetLen+0x1a>
  {
    len++;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3301      	adds	r3, #1
 8008d84:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f5      	bne.n	8008d7a <USBD_GetLen+0xe>
  }

  return len;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008db6:	88fa      	ldrh	r2, [r7, #6]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 fc3f 	bl	8009646 <USBD_LL_Transmit>

  return USBD_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fc2d 	bl	8009646 <USBD_LL_Transmit>

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	4613      	mov	r3, r2
 8008e02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2203      	movs	r2, #3
 8008e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e14:	88fa      	ldrh	r2, [r7, #6]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	2100      	movs	r1, #0
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fc32 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	2100      	movs	r1, #0
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fc20 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2204      	movs	r2, #4
 8008e62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e66:	2300      	movs	r3, #0
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fbea 	bl	8009646 <USBD_LL_Transmit>

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2205      	movs	r2, #5
 8008e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fbfa 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4912      	ldr	r1, [pc, #72]	; (8008ef4 <MX_USB_DEVICE_Init+0x50>)
 8008eac:	4812      	ldr	r0, [pc, #72]	; (8008ef8 <MX_USB_DEVICE_Init+0x54>)
 8008eae:	f7fe ff5f 	bl	8007d70 <USBD_Init>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008eb8:	f7f7 fdfa 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ebc:	490f      	ldr	r1, [pc, #60]	; (8008efc <MX_USB_DEVICE_Init+0x58>)
 8008ebe:	480e      	ldr	r0, [pc, #56]	; (8008ef8 <MX_USB_DEVICE_Init+0x54>)
 8008ec0:	f7fe ff81 	bl	8007dc6 <USBD_RegisterClass>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eca:	f7f7 fdf1 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ece:	490c      	ldr	r1, [pc, #48]	; (8008f00 <MX_USB_DEVICE_Init+0x5c>)
 8008ed0:	4809      	ldr	r0, [pc, #36]	; (8008ef8 <MX_USB_DEVICE_Init+0x54>)
 8008ed2:	f7fe fee1 	bl	8007c98 <USBD_CDC_RegisterInterface>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008edc:	f7f7 fde8 	bl	8000ab0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ee0:	4805      	ldr	r0, [pc, #20]	; (8008ef8 <MX_USB_DEVICE_Init+0x54>)
 8008ee2:	f7fe ff89 	bl	8007df8 <USBD_Start>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008eec:	f7f7 fde0 	bl	8000ab0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ef0:	bf00      	nop
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	2000012c 	.word	0x2000012c
 8008ef8:	20000454 	.word	0x20000454
 8008efc:	20000018 	.word	0x20000018
 8008f00:	2000011c 	.word	0x2000011c

08008f04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4905      	ldr	r1, [pc, #20]	; (8008f20 <CDC_Init_FS+0x1c>)
 8008f0c:	4805      	ldr	r0, [pc, #20]	; (8008f24 <CDC_Init_FS+0x20>)
 8008f0e:	f7fe fed9 	bl	8007cc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f12:	4905      	ldr	r1, [pc, #20]	; (8008f28 <CDC_Init_FS+0x24>)
 8008f14:	4803      	ldr	r0, [pc, #12]	; (8008f24 <CDC_Init_FS+0x20>)
 8008f16:	f7fe feee 	bl	8007cf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000b00 	.word	0x20000b00
 8008f24:	20000454 	.word	0x20000454
 8008f28:	20000718 	.word	0x20000718

08008f2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr
	...

08008f3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b23      	cmp	r3, #35	; 0x23
 8008f50:	d84a      	bhi.n	8008fe8 <CDC_Control_FS+0xac>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <CDC_Control_FS+0x1c>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008fe9 	.word	0x08008fe9
 8008f5c:	08008fe9 	.word	0x08008fe9
 8008f60:	08008fe9 	.word	0x08008fe9
 8008f64:	08008fe9 	.word	0x08008fe9
 8008f68:	08008fe9 	.word	0x08008fe9
 8008f6c:	08008fe9 	.word	0x08008fe9
 8008f70:	08008fe9 	.word	0x08008fe9
 8008f74:	08008fe9 	.word	0x08008fe9
 8008f78:	08008fe9 	.word	0x08008fe9
 8008f7c:	08008fe9 	.word	0x08008fe9
 8008f80:	08008fe9 	.word	0x08008fe9
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	08008fe9 	.word	0x08008fe9
 8008f8c:	08008fe9 	.word	0x08008fe9
 8008f90:	08008fe9 	.word	0x08008fe9
 8008f94:	08008fe9 	.word	0x08008fe9
 8008f98:	08008fe9 	.word	0x08008fe9
 8008f9c:	08008fe9 	.word	0x08008fe9
 8008fa0:	08008fe9 	.word	0x08008fe9
 8008fa4:	08008fe9 	.word	0x08008fe9
 8008fa8:	08008fe9 	.word	0x08008fe9
 8008fac:	08008fe9 	.word	0x08008fe9
 8008fb0:	08008fe9 	.word	0x08008fe9
 8008fb4:	08008fe9 	.word	0x08008fe9
 8008fb8:	08008fe9 	.word	0x08008fe9
 8008fbc:	08008fe9 	.word	0x08008fe9
 8008fc0:	08008fe9 	.word	0x08008fe9
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	08008fe9 	.word	0x08008fe9
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008fe9 	.word	0x08008fe9
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	08008fe9 	.word	0x08008fe9
 8008fe0:	08008fe9 	.word	0x08008fe9
 8008fe4:	08008fe9 	.word	0x08008fe9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fe8:	bf00      	nop
  }

  return (USBD_OK);
 8008fea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bc80      	pop	{r7}
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop

08008ff8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	4805      	ldr	r0, [pc, #20]	; (800901c <CDC_Receive_FS+0x24>)
 8009006:	f7fe fe76 	bl	8007cf6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800900a:	4804      	ldr	r0, [pc, #16]	; (800901c <CDC_Receive_FS+0x24>)
 800900c:	f7fe fe86 	bl	8007d1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009010:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000454 	.word	0x20000454

08009020 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2212      	movs	r2, #18
 8009030:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009032:	4b03      	ldr	r3, [pc, #12]	; (8009040 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000148 	.word	0x20000148

08009044 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2204      	movs	r2, #4
 8009054:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009056:	4b03      	ldr	r3, [pc, #12]	; (8009064 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	bc80      	pop	{r7}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	2000015c 	.word	0x2000015c

08009068 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4907      	ldr	r1, [pc, #28]	; (800909c <USBD_FS_ProductStrDescriptor+0x34>)
 800907e:	4808      	ldr	r0, [pc, #32]	; (80090a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009080:	f7ff fe32 	bl	8008ce8 <USBD_GetString>
 8009084:	e004      	b.n	8009090 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4904      	ldr	r1, [pc, #16]	; (800909c <USBD_FS_ProductStrDescriptor+0x34>)
 800908a:	4805      	ldr	r0, [pc, #20]	; (80090a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800908c:	f7ff fe2c 	bl	8008ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000ee8 	.word	0x20000ee8
 80090a0:	08009818 	.word	0x08009818

080090a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	4904      	ldr	r1, [pc, #16]	; (80090c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090b4:	4804      	ldr	r0, [pc, #16]	; (80090c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090b6:	f7ff fe17 	bl	8008ce8 <USBD_GetString>
  return USBD_StrDesc;
 80090ba:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20000ee8 	.word	0x20000ee8
 80090c8:	08009830 	.word	0x08009830

080090cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	221a      	movs	r2, #26
 80090dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090de:	f000 f843 	bl	8009168 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000160 	.word	0x20000160

080090f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	4907      	ldr	r1, [pc, #28]	; (8009124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009106:	4808      	ldr	r0, [pc, #32]	; (8009128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009108:	f7ff fdee 	bl	8008ce8 <USBD_GetString>
 800910c:	e004      	b.n	8009118 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	4904      	ldr	r1, [pc, #16]	; (8009124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009112:	4805      	ldr	r0, [pc, #20]	; (8009128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009114:	f7ff fde8 	bl	8008ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20000ee8 	.word	0x20000ee8
 8009128:	08009844 	.word	0x08009844

0800912c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	4907      	ldr	r1, [pc, #28]	; (8009160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009142:	4808      	ldr	r0, [pc, #32]	; (8009164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009144:	f7ff fdd0 	bl	8008ce8 <USBD_GetString>
 8009148:	e004      	b.n	8009154 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	4904      	ldr	r1, [pc, #16]	; (8009160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800914e:	4805      	ldr	r0, [pc, #20]	; (8009164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009150:	f7ff fdca 	bl	8008ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000ee8 	.word	0x20000ee8
 8009164:	08009850 	.word	0x08009850

08009168 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800916e:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <Get_SerialNum+0x44>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009174:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <Get_SerialNum+0x48>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <Get_SerialNum+0x4c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4413      	add	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d009      	beq.n	80091a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800918e:	2208      	movs	r2, #8
 8009190:	4909      	ldr	r1, [pc, #36]	; (80091b8 <Get_SerialNum+0x50>)
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f814 	bl	80091c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009198:	2204      	movs	r2, #4
 800919a:	4908      	ldr	r1, [pc, #32]	; (80091bc <Get_SerialNum+0x54>)
 800919c:	68b8      	ldr	r0, [r7, #8]
 800919e:	f000 f80f 	bl	80091c0 <IntToUnicode>
  }
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	1ffff7e8 	.word	0x1ffff7e8
 80091b0:	1ffff7ec 	.word	0x1ffff7ec
 80091b4:	1ffff7f0 	.word	0x1ffff7f0
 80091b8:	20000162 	.word	0x20000162
 80091bc:	20000172 	.word	0x20000172

080091c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091d2:	2300      	movs	r3, #0
 80091d4:	75fb      	strb	r3, [r7, #23]
 80091d6:	e027      	b.n	8009228 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	0f1b      	lsrs	r3, r3, #28
 80091dc:	2b09      	cmp	r3, #9
 80091de:	d80b      	bhi.n	80091f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	0f1b      	lsrs	r3, r3, #28
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4619      	mov	r1, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	440b      	add	r3, r1
 80091f0:	3230      	adds	r2, #48	; 0x30
 80091f2:	b2d2      	uxtb	r2, r2
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e00a      	b.n	800920e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	0f1b      	lsrs	r3, r3, #28
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	4619      	mov	r1, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	440b      	add	r3, r1
 8009208:	3237      	adds	r2, #55	; 0x37
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	3301      	adds	r3, #1
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	3301      	adds	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]
 8009228:	7dfa      	ldrb	r2, [r7, #23]
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	429a      	cmp	r2, r3
 800922e:	d3d3      	bcc.n	80091d8 <IntToUnicode+0x18>
  }
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a0d      	ldr	r2, [pc, #52]	; (8009280 <HAL_PCD_MspInit+0x44>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d113      	bne.n	8009276 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800924e:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <HAL_PCD_MspInit+0x48>)
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	4a0c      	ldr	r2, [pc, #48]	; (8009284 <HAL_PCD_MspInit+0x48>)
 8009254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009258:	61d3      	str	r3, [r2, #28]
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <HAL_PCD_MspInit+0x48>)
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009266:	2200      	movs	r2, #0
 8009268:	2100      	movs	r1, #0
 800926a:	2014      	movs	r0, #20
 800926c:	f7f8 f84f 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009270:	2014      	movs	r0, #20
 8009272:	f7f8 f868 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009276:	bf00      	nop
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	40005c00 	.word	0x40005c00
 8009284:	40021000 	.word	0x40021000

08009288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fe fdf2 	bl	8007e88 <USBD_LL_SetupStage>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	440b      	add	r3, r1
 80092cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	4619      	mov	r1, r3
 80092d6:	f7fe fe24 	bl	8007f22 <USBD_LL_DataOutStage>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	440b      	add	r3, r1
 8009302:	333c      	adds	r3, #60	; 0x3c
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	4619      	mov	r1, r3
 800930a:	f7fe fe7b 	bl	8008004 <USBD_LL_DataInStage>
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe ff8b 	bl	8008240 <USBD_LL_SOF>
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800933a:	2301      	movs	r3, #1
 800933c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d001      	beq.n	800934a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009346:	f7f7 fbb3 	bl	8000ab0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009350:	7bfa      	ldrb	r2, [r7, #15]
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe ff3b 	bl	80081d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fef4 	bl	800814e <USBD_LL_Reset>
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe ff35 	bl	80081ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <HAL_PCD_SuspendCallback+0x30>)
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	4a03      	ldr	r2, [pc, #12]	; (80093a0 <HAL_PCD_SuspendCallback+0x30>)
 8009392:	f043 0306 	orr.w	r3, r3, #6
 8009396:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	e000ed00 	.word	0xe000ed00

080093a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe ff2f 	bl	8008216 <USBD_LL_Resume>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093c8:	4a28      	ldr	r2, [pc, #160]	; (800946c <USBD_LL_Init+0xac>)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a26      	ldr	r2, [pc, #152]	; (800946c <USBD_LL_Init+0xac>)
 80093d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093d8:	4b24      	ldr	r3, [pc, #144]	; (800946c <USBD_LL_Init+0xac>)
 80093da:	4a25      	ldr	r2, [pc, #148]	; (8009470 <USBD_LL_Init+0xb0>)
 80093dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093de:	4b23      	ldr	r3, [pc, #140]	; (800946c <USBD_LL_Init+0xac>)
 80093e0:	2208      	movs	r2, #8
 80093e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093e4:	4b21      	ldr	r3, [pc, #132]	; (800946c <USBD_LL_Init+0xac>)
 80093e6:	2202      	movs	r2, #2
 80093e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093ea:	4b20      	ldr	r3, [pc, #128]	; (800946c <USBD_LL_Init+0xac>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <USBD_LL_Init+0xac>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80093f6:	4b1d      	ldr	r3, [pc, #116]	; (800946c <USBD_LL_Init+0xac>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093fc:	481b      	ldr	r0, [pc, #108]	; (800946c <USBD_LL_Init+0xac>)
 80093fe:	f7f8 fbd4 	bl	8001baa <HAL_PCD_Init>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009408:	f7f7 fb52 	bl	8000ab0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009412:	2318      	movs	r3, #24
 8009414:	2200      	movs	r2, #0
 8009416:	2100      	movs	r1, #0
 8009418:	f7fa f848 	bl	80034ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009422:	2358      	movs	r3, #88	; 0x58
 8009424:	2200      	movs	r2, #0
 8009426:	2180      	movs	r1, #128	; 0x80
 8009428:	f7fa f840 	bl	80034ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009432:	23c0      	movs	r3, #192	; 0xc0
 8009434:	2200      	movs	r2, #0
 8009436:	2181      	movs	r1, #129	; 0x81
 8009438:	f7fa f838 	bl	80034ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009442:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009446:	2200      	movs	r2, #0
 8009448:	2101      	movs	r1, #1
 800944a:	f7fa f82f 	bl	80034ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009458:	2200      	movs	r2, #0
 800945a:	2182      	movs	r1, #130	; 0x82
 800945c:	f7fa f826 	bl	80034ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	200010e8 	.word	0x200010e8
 8009470:	40005c00 	.word	0x40005c00

08009474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948a:	4618      	mov	r0, r3
 800948c:	f7f8 fc98 	bl	8001dc0 <HAL_PCD_Start>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f94e 	bl	8009738 <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	4608      	mov	r0, r1
 80094b4:	4611      	mov	r1, r2
 80094b6:	461a      	mov	r2, r3
 80094b8:	4603      	mov	r3, r0
 80094ba:	70fb      	strb	r3, [r7, #3]
 80094bc:	460b      	mov	r3, r1
 80094be:	70bb      	strb	r3, [r7, #2]
 80094c0:	4613      	mov	r3, r2
 80094c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094d2:	78bb      	ldrb	r3, [r7, #2]
 80094d4:	883a      	ldrh	r2, [r7, #0]
 80094d6:	78f9      	ldrb	r1, [r7, #3]
 80094d8:	f7f8 fe10 	bl	80020fc <HAL_PCD_EP_Open>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f928 	bl	8009738 <USBD_Get_USB_Status>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	4611      	mov	r1, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f7f8 fe57 	bl	80021c8 <HAL_PCD_EP_Close>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f909 	bl	8009738 <USBD_Get_USB_Status>
 8009526:	4603      	mov	r3, r0
 8009528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7f8 ff17 	bl	8002386 <HAL_PCD_EP_SetStall>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f8ea 	bl	8009738 <USBD_Get_USB_Status>
 8009564:	4603      	mov	r3, r0
 8009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009568:	7bbb      	ldrb	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f7f8 ff58 	bl	8002446 <HAL_PCD_EP_ClrStall>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f8cb 	bl	8009738 <USBD_Get_USB_Status>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da0c      	bge.n	80095e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	440b      	add	r3, r1
 80095e0:	3302      	adds	r3, #2
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	e00b      	b.n	80095fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009622:	78fa      	ldrb	r2, [r7, #3]
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f7f8 fd43 	bl	80020b2 <HAL_PCD_SetAddress>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f880 	bl	8009738 <USBD_Get_USB_Status>
 8009638:	4603      	mov	r3, r0
 800963a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800963c:	7bbb      	ldrb	r3, [r7, #14]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	461a      	mov	r2, r3
 8009652:	460b      	mov	r3, r1
 8009654:	72fb      	strb	r3, [r7, #11]
 8009656:	4613      	mov	r3, r2
 8009658:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009668:	893b      	ldrh	r3, [r7, #8]
 800966a:	7af9      	ldrb	r1, [r7, #11]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	f7f8 fe47 	bl	8002300 <HAL_PCD_EP_Transmit>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f85d 	bl	8009738 <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009682:	7dbb      	ldrb	r3, [r7, #22]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	461a      	mov	r2, r3
 8009698:	460b      	mov	r3, r1
 800969a:	72fb      	strb	r3, [r7, #11]
 800969c:	4613      	mov	r3, r2
 800969e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ae:	893b      	ldrh	r3, [r7, #8]
 80096b0:	7af9      	ldrb	r1, [r7, #11]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	f7f8 fdd0 	bl	8002258 <HAL_PCD_EP_Receive>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f83a 	bl	8009738 <USBD_Get_USB_Status>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7f8 fdf2 	bl	80022d2 <HAL_PCD_EP_GetRxCount>
 80096ee:	4603      	mov	r3, r0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <USBD_static_malloc+0x14>)
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr
 800970c:	200013d4 	.word	0x200013d4

08009710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr

08009722 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	2b03      	cmp	r3, #3
 800974a:	d817      	bhi.n	800977c <USBD_Get_USB_Status+0x44>
 800974c:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <USBD_Get_USB_Status+0x1c>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	08009765 	.word	0x08009765
 8009758:	0800976b 	.word	0x0800976b
 800975c:	08009771 	.word	0x08009771
 8009760:	08009777 	.word	0x08009777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
    break;
 8009768:	e00b      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800976a:	2302      	movs	r3, #2
 800976c:	73fb      	strb	r3, [r7, #15]
    break;
 800976e:	e008      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009770:	2301      	movs	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]
    break;
 8009774:	e005      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009776:	2302      	movs	r3, #2
 8009778:	73fb      	strb	r3, [r7, #15]
    break;
 800977a:	e002      	b.n	8009782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800977c:	2302      	movs	r3, #2
 800977e:	73fb      	strb	r3, [r7, #15]
    break;
 8009780:	bf00      	nop
  }
  return usb_status;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	bc80      	pop	{r7}
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	2600      	movs	r6, #0
 8009794:	4d0c      	ldr	r5, [pc, #48]	; (80097c8 <__libc_init_array+0x38>)
 8009796:	4c0d      	ldr	r4, [pc, #52]	; (80097cc <__libc_init_array+0x3c>)
 8009798:	1b64      	subs	r4, r4, r5
 800979a:	10a4      	asrs	r4, r4, #2
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	f000 f822 	bl	80097e8 <_init>
 80097a4:	2600      	movs	r6, #0
 80097a6:	4d0a      	ldr	r5, [pc, #40]	; (80097d0 <__libc_init_array+0x40>)
 80097a8:	4c0a      	ldr	r4, [pc, #40]	; (80097d4 <__libc_init_array+0x44>)
 80097aa:	1b64      	subs	r4, r4, r5
 80097ac:	10a4      	asrs	r4, r4, #2
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	08009870 	.word	0x08009870
 80097cc:	08009870 	.word	0x08009870
 80097d0:	08009870 	.word	0x08009870
 80097d4:	08009874 	.word	0x08009874

080097d8 <memset>:
 80097d8:	4603      	mov	r3, r0
 80097da:	4402      	add	r2, r0
 80097dc:	4293      	cmp	r3, r2
 80097de:	d100      	bne.n	80097e2 <memset+0xa>
 80097e0:	4770      	bx	lr
 80097e2:	f803 1b01 	strb.w	r1, [r3], #1
 80097e6:	e7f9      	b.n	80097dc <memset+0x4>

080097e8 <_init>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	bf00      	nop
 80097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ee:	bc08      	pop	{r3}
 80097f0:	469e      	mov	lr, r3
 80097f2:	4770      	bx	lr

080097f4 <_fini>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	bf00      	nop
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr
